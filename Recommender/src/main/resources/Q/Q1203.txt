 question  ,  "/*  what  is  the  output  of  the  following  program?  */public  class  test  {public  boolean  equals(  test  other  )  {system.out.println(  ""inside  of  test.equals""  );return  false;}public  static  void  main(  string  []  args  )  {object  t1  =  new  test();object  t2  =  new  test();test  t3  =  new  test();object  o1  =  new  object();int  count  =  0;system.out.println(  count++  );//  prints  0t1.equals(  t2  )  ;system.out.println(  count++  );//  prints  1t1.equals(  t3  );system.out.println(  count++  );//  prints  2t3.equals(  o1  );system.out.println(  count++  );//  prints  3t3.equals(t3);system.out.println(  count++  );//  prints  4t3.equals(t2);}};  equals();  t1.equals(t3);  t3.equals(t3);  t1;  t3.equals(t3);  t1;  equals()"  ,yesterday  i  had  a  twohour  technic  phone  interview  which  i  pass  woohoo  but  i  complet  muf  up  the  follow  question  regard  dynam  bind  in  javaand  it  doubli  puzzl  becaus  i  use  to  teach  this  concept  to  undergradu  when  i  was  a  ta  a  few  year  ago  so  the  prospect  that  i  gave  them  misinform  is  a  littl  disturb  here  the  problem  i  was  given  i  assert  that  the  output  should  have  been  two  separ  print  statement  from  within  the  overridden  method  at  andth  latter  case  is  obvious  enough  and  with  the  former  case  even  though  has  a  refer  of  type  object  it  is  instanti  as  type  test  so  dynam  bind  should  call  the  overridden  form  of  the  method  appar  notmi  interview  encourag  me  to  run  the  program  myself  and  lo  and  behold  there  was  onli  a  singl  output  from  the  overridden  method  at  the  line  my  question  then  is  whya  i  mention  alreadi  even  though  is  a  refer  of  type  object  so  static  bind  would  invok  object  method  dynam  bind  take  care  of  invok  the  most  specif  version  of  the  method  base  on  the  instanti  type  of  the  referencewhat  am  i  miss  ,    objectvari  simplevari  simpleassignmentexpress                                