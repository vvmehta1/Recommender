 question  ,  "public  static  void  populate(node  n'  '  int  depth'  '  string  player){system.out.println(""depth:  ""  +  depth);if(player.equalsignorecase(""x""))player  =  ""o"";elseplayer  =  ""x"";int  j  =  0;system.out.println(""empty  spots:  ""  +  ((board)n.getdata()).noofempty());for(int  i=0;  i<((board)n.getdata()).noofempty();  i++){if(((board)n.getdata()).getsquare(j).equalsignorecase(""x"")||  ((board)n.getdata()).getsquare(j).equalsignorecase(""o""))j++;else{board  tmp  =  new  board(((board)n.getdata())'  '  j'  '  player);node  newnode  =  new  node(tmp);tree.insert(n'  '  newnode);populate(newnode'  '  depth-1'  '  player);}}};  noofempty();  public  class  minmax  {protected  static  tree  tree;public  static  void  createtree(board  b){tree  =  new  tree();tree.setroot(new  node(b));populate(tree.getroot()'  '  5'  '  ""x"");//system.out.println(""printing  tree"");//tree.print(1);}public  static  void  populate(node  n'  '  int  depth'  '  string  player){system.out.println(""depth:  ""  +  depth);if(player.equalsignorecase(""x""))player  =  ""o"";elseplayer  =  ""x"";int  j  =  0;system.out.println(""empty  spots:  ""  +  ((board)n.getdata()).noofempty());for(int  i=0;  i<((board)n.getdata()).noofempty();  i++){if(((board)n.getdata()).getsquare(j).equalsignorecase(""x"")||  ((board)n.getdata()).getsquare(j).equalsignorecase(""o""))j++;else{board  tmp  =  new  board(((board)n.getdata())'  '  j'  '  player);node  newnode  =  new  node(tmp);tree.insert(n'  '  newnode);populate(newnode'  '  depth-1'  '  player);}}}}import  java.util.arraylist;/****  @author  greg*/public  class  node  {protected  object  data;protected  int  score;  //fields  to  be  used  by  the  maxmin  classprotected  arraylist<node>  children;//constructorspublic  node(){children  =  new  arraylist(0);data  =  null;}public  node(object  obj){children  =  new  arraylist(0);data  =  obj;}public  void  setchild(node  n){//effect:  set  the  ith  child  to  node  tchildren.add(n);}public  void  setchildren(node[]  t){//effect:  copy  the  array  t'  '  into  the  array  children'  '  effectively//  setting  all  the  chidern  of  this  node  simultaneoulyint  l  =  children.size();for(int  i=0;  i<t.length;  i++){children.add(l'  '  t[i]);}}public  void  setdata(object  obj){//effect:  set  the  date  of  this  node  to  obj'  '  and  also  set  the  number  of//children  this  node  hasdata  =  obj;}public  node  getchild(int  i){//effect:  returns  the  child  at  index  ireturn  children.get(i);}public  int  noofchildren(){//effect:  return  the  length  of  this  nodereturn  children.size();}public  object  getdata(){//effect:  returns  the  data  of  this  nodereturn  data;}@overridepublic  string  tostring(){//effect:  returns  the  string  form  of  this  nodereturn  """"  +  data.tostring()  +  ""with  ""  +  noofchildren()+  """";}public  boolean  isleaf(){if(children.size()==0)return  true;return  false;}public  void  setscore(int  scr){score  =  scr;}public  int  getscore(){return  score;}}public  class  tree  {private  node  root;public  tree(){setroot(null);}public  tree(node  n){setroot(n);}public  tree(object  obj){setroot(new  node(obj));}protected  node  getroot(){return  root;}protected  void  setroot(node  n){root  =  n;}public  boolean  isempty(){return  getroot()  ==  null;}public  object  getdata(){if(!isempty())return  getroot().getdata();return  null;}public  object  getchild(int  i){return  root.getchild(i);}public  void  setdata(object  obj){if(!isempty())getroot().setdata(obj);}public  void  insert(node  p'  'node  c){if(p  !=  null)p.setchild(c);}public  void  print(int  mode){if(mode  ==  1)  pretrav();else  if(mode  ==  2)  postrav();elsesystem.out.println(""yeah...  mode  1  or  2...nothing  else'  '  try  agn"");}public  void  pretrav(){pretrav(getroot());}protected  void  pretrav(node  t){if(t  ==  null)return;system.out.println(t.getdata()+""  "");for(int  i=0;  i<t.noofchildren();  i++)pretrav(t.getchild(i));}public  void  postrav(){postrav(getroot());}protected  void  postrav(node  t){if(t  ==  null)return;system.out.print(t.getdata()+""  "");for(int  i=0;  i<t.noofchildren();  i++)pretrav(t.getchild(i));system.out.print(t.getdata()+""  "");}}public  class  board  {boolean  isfull  =  false;  //  a  check  to  see  if  the  board  is  fullstring[]  grid  =  new  string[9];//an  array  represting  the  9  square  on  a  boardint  hv;string  min'  '  max;public  board(){for(int  i=0;  i<grid.length;i++)grid[i]  =  integer.tostring(i);hv  =  heuristicvalue(this);}public  board(board  b'  '  int  x'  '  string  player){this.grid  =  b.getboard();if(!(grid[x].equalsignorecase(""x"")||  grid[x].equalsignorecase(""x"")))grid[x]  =  player;}public  boolean  setsquare(string  player'  '  int  position){/*effect:set  a  square  on  the  board  to  either  a  x  or  a  o'  '  debending  on  the  playerprecon:  square  (x'  'y)  is  emptypoatcon:  square  (x'  'y)  has  player  'symbol'*/boolean  isvalidplay  =  false;try{//as  a  sanityinteger.parseint(grid[position]);grid[position]  =  player;isvalidplay  =  true;}catch(numberformatexception  e){system.out.println(""positon  ""  +  position  +  ""is  already  occupied"");}return  isvalidplay;}public  boolean  endgame(){/**  effect:  check  to  see  if  the  game  have  been  won  or  drawn*/if(tictactoe(0'  '1'  '2)){//system.out.println(""player  ""  +  grid[0]  +  ""  wins"");return  true;}else  if(tictactoe(3'  '4'  '5)){//system.out.println(""player  ""  +  grid[3]  +  ""  wins"");return  true;}else  if(tictactoe(6'  '7'  '8)){//system.out.println(""player  ""  +  grid[6]  +  ""  wins"");return  true;}else  if(tictactoe(0'  '4'  '8)){//system.out.println(""player  ""  +  grid[0]+  ""  wins"");return  true;}else  if(tictactoe(0'  '3'  '6)){//system.out.println(""player  ""  +  grid[0]+  ""  wins"");return  true;}else  if(tictactoe(1'  '4'  '7)){//system.out.println(""player  ""  +  grid[1]  +  ""  wins"");return  true;}else  if(tictactoe(2'  '5'  '8)){//system.out.println(""player  ""  +  grid[2]  +  ""  wins"");return  true;}else  if(tictactoe(2'  '4'  '6)){//system.out.println(""player  ""  +  grid[2]  +  ""  wins"");return  true;}elsereturn  isdrawn();}public  boolean  tictactoe(int  x'  '  int  y'  '  int  z){/**  check  is  x'  '  y  and  z  has  the  same  value*/try{integer.parseint(grid[x]);return  false;}catch(numberformatexception  e){if(  grid[x].equals(grid[y])&&  grid[x].equals(grid[z]))return  true;elsereturn  false;}}public  string  getsquare(int  i){return  grid[i];}@overridepublic  string  tostring(){string  msg  =  """";for(int  i=0;  i<grid.length;  i++){msg  =  msg  +  grid[i]  +  ""  "";if(i==2  ||  i==5)msg  =  msg+  """";}return  msg;}public  boolean  isdrawn(){/**  check  to  see  if  there  are  any  'free'  spaces  on  the  board'  '  if  there  are  any*  return  false'  '  else  return  true*/for(int  i=0;  i<grid.length;  i++){try{integer.parseint(grid[i]);return  false;}catch(numberformatexception  e){}}system.out.println(""game  drawn"");return  true;}public  string[]  getboard(){return  grid;}public  int  noofempty(){//effect:  returns  the  number  of  empty  squaresint  count  =  0;for(int  i=0;  i<grid.length;  i++)if  (!(grid[i].equalsignorecase(""x"")  ||  grid[i].equalsignorecase(""o"")))count++;return  count;}public  int  heuristicvalue(board  b){string  max  =  ""x""'  '  min  =  ""o"";/**  calculate  a  value  that  will  be  used  as  a  heuristic  function*  the  function  works  for  ever  x  in  a  row  without  o:  1  point'  '*  for  two  x  in  a  row  without  a  o:  5  points*  and  3  x  in  a  row:  100  points*///system.out.println(""computing  heuristic"");//system.out.println(""computing  horizontals"");int  hcount  =  0;//sum  up  the  horizontalsfor(int  i=0;  i<9;  i=i+3){int  tmpmax  =  playercount(b'  '  max'  'i'  'i+1'  'i+2);int  tmpmin  =  playercount(b'  '  min'  'i'  'i+1'  'i+2);//system.out.println(tmpmax);//system.out.println(tmpmin);if(tmpmin  >  0){//system.out.println(""min  was  zero"");}else  if(tmpmax==1){//system.out.println(""has  one"");hcount  =  hcount  +  1;}else  if(tmpmax==2){//system.out.println(""was  tw0"");hcount  =  hcount  +  5;}else  if(tmpmax==3){//system.out.println(""full  100"");hcount  =  hcount  +  100;}}//system.out.println(""computing  verticals"");//sum  up  the  verticalsfor(int  i=0;  i<3;  i++){int  tmpmax  =  playercount(b'  '  max'  'i'  'i+3'  'i+6);int  tmpmin  =  playercount(b'  '  min'  'i'  'i+3'  'i+6);if(tmpmin  >  0){}else  if(tmpmax==1){hcount  =  hcount  +1;}else  if(tmpmax==2){hcount  =  hcount  +  5;}else  if(tmpmax==3){hcount  =  hcount  +  100;}}//system.out.println(""computing  diagonals"");//sum  up  diagonalsif(playercount(b'  '  min'  '0'  '4'  '8)==0){if(playercount(b'  '  max'  '0'  '4'  '8)==1){hcount  =  hcount  +  1;}if(playercount(b'  '  max'  '0'  '4'  '8)==2)hcount  =  hcount  +  5;if(playercount(b'  '  max'  '0'  '4'  '8)==3)hcount  =  hcount  +  100;}if(playercount(b'  '  min'  '2'  '4'  '6)==0){if(playercount(b'  '  max'  '2'  '4'  '6)==1){hcount  =  hcount  +  1;}if(playercount(b'  '  max'  '2'  '4'  '6)==2)hcount  =  hcount  +  5;if(playercount(b'  '  max'  '2'  '4'  '6)==3)hcount  =  hcount  +  100;}//system.out.println(""computing  completed"");int  hv  =  hcount;return  hv;}int  playercount(board  b'  '  string  player'  '  int  x'  '  int  y'  '  int  z){int  count  =  0;if(b.getsquare(x).equals(player))count  =  count  +  1;if(b.getsquare(y).equals(player))count  =  count  +  1;if(b.getsquare(z).equals(player))count  =  count  +  1;//system.out.println(""playercount;  ""  +  count);return  count;}}import  java.io.*;;  public  static  void  main(string[]  args)  throws  ioexception{bufferedreaderreader  =  new  bufferedreader(newinputstreamreader(system.in));board  thisgame  =  new  board();system.out.println(""start  ""  +  thisgame.tostring());minmax.createtree(thisgame);system.exit(0);}"  ,i  am  tri  to  recurs  popul  a  tree  but  my  code  is  onli  onli  fill  out  one  depth  length  and  then  quit  ie  each  node  onli  has  one  child  is  there  someth  am  fail  to  take  in  to  consider  ps  and  i  check  the  return  valu  which  should  determin  the  number  of  children  a  node  should  have  editeznm  the  complet  code  as  request  import  javaioioexcept  public  class  main  ,  intdatatyp  simplevari  stringvari  stringdatatyp  javalangsystemoutprintln  actualmethodparamet  stringliter  stringaddit  ifstat  javalangstringequalsignorecas  objectmethodinvoc  simpleassignmentexpress  explicittypecast  forstat  lessexpress  postincrementexpress  ifelsestat  orexpress  objectcreationstat  constructorcal  protectedfieldspecifi  staticfieldspecifi  classfield  javautilarraylist  importstat  instancefield  objectvari  arrayel  formalmethodparamet  javalangobject  notequalexpress  null  ifelseifstat  equalexpress  instancefieldinitializationstat  booleandatatyp  fals  instancefieldinvoc  thisrefer  notexpress  multiplyexpress  javalangintegerparseint  returnstat  javalangstringequ  andexpress  true  arraylength  trycatchstat  greaterexpress  addexpress    intdatatyp  simplevari  ifelsestat  simpleassignmentexpress  objectcreationstat  constructorcal  forstat  lessexpress  objectmethodinvoc  postincrementexpress  actualmethodparamet     objectvari  simplevari  simpleassignmentexpress  