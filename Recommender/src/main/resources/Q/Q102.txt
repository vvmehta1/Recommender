 question  ,  "package  ska;/*  *  ver  0.32  june  2009  *  *  bug  fix  release:  *  *  fixed  array  resize  *  fixed  red  black  tree  delete  method  *  fixed  red  black  tree  save/read  option  *  update  help  file  *  *//*  *  additions:  *  ver  0.30  may  2009  *  *  added  red  black  tree  structure  *  added  delete  method  for  canvases  *  added  array  structure  *  added  ability  to  recolor  nodes.  *  added  bubble  sort  algorithm  *  added  insertion  sort  algorithm  *  added  shell  sort  algorithm  *  added  selection  sort  algorithm  *  added  quick  sort  algorithm  *  added  red  black  tree  search  algorithm  *  added  black  height  check  algorithm  *  bug  fix  in  canvas  -  could  not  delete  canvas  properly  *///  additions:  /*  ver  0.25  august  2004  *added  recursion  in  skaexecutionpanel  by  adding  skafunction  *and  using  desktop  internal  panes.  *  *added  binary  tree  node  annotation  -  text  and  drawn  *added  subtree  highlight  feature  to  vizbinarytreenode  using  skarectangle  *improved  node  highlighting  and  selection  scheme  in  vizbinarytrees/vizds  *added  binary  tree  save  and  read  methods  *added  visual  subtree  deletion  (has  bug)  *  *added  ability  to  set  breaks  from  within  algorithm  *added  tooltip  messages  to  skaprogram/skafunction  to  show  variable  values  *added  simple  value  input  and  output  methods  to  skaprogram/skafunction  *added  skatriangle.  *added  font  adjustment  and  color  scheme  options  to  show  on  overhead  projectors  *  *found  bug  in  skagraph  deletevertex  (with  edges)  *//*  ver  0.16  october  15'  '  2001added  graph  save  and  read  methods.save  is  an  instance  method'  '  while  read  is  a  class  method.added  circular  layout  for  graphs'  '  added  fit/adjust  graph  layout  to  plate  size  method.added  label  editing  for  binary  trees  and  graphs.  skalabels  (glyphs)  now  truncate  the  string  displayed  to  the  width  specified  in  the  constructor.*//*  ver  0.15  july  21'  '  2001  fixed  reset  function  in  execution  using  exceptions  so  that  ska  algorithms  can  be  run  repeatedly  without  quitting  the  entire  ska  system.  this  also  allows  trying  the  same  program  on  different  data  structures.  problems  with  reset  so  far:  1.  reset  message  to  user  can  appear  much  later.i  think  this  is  an  i/o  sequencing  problem  and  it  should  go  away  if  a  message  status  gui  area  is  used.  2.  bound  variable  names  remain  afterwards'  '  e.g.  graph  bound  to  g  will  still  show  name  as  g  afteralgorithm  is  interrupted.  fixed  problem  with  multiple  input  requests  in  0.14  -  by  adding  anotherwait  call  which  waits  on  before  asking  for  input.  also  introduced  trial  orderly  layout  of  canvas  and  program  windows  '  '  which  fixes  problem  in  0.14*/  /*  ver  0.14  july  18'  '  2001  added  subclasses  of  skaprogram'  '  so  that  multiple  programs  can  run  simultaneously.  problem  -  when  multiple  programs  start'  '  their  windows  overlay  each  other  problem  -  send  ds  to  algorithm  can  get  confused'  '  if  an  algorithm  requests  input  while  another  is  waiting  on  input  or  if  two  algorithms  request  input  at  the  same  time*//*  ver  0.13  added  binarytree  -  does  not  have  node  value  display  yet.  added  arrows  on  edges  of  directed  graphs*/  /*  ver  0.12added  vizelementlistener  -  separated  from  vizelementelement  input  menu  item  only  highlights  when  input  for  that  ds  is  requestedds  input  has  been  cleaned  up*//*  ver  0.11can  ask  user  to  select  individual  elements'  '  e.g.  verticesremoved  standard  java  cloning  code  which  wasn't  being  used  anyway*/import  java.awt.borderlayout;import  java.awt.dimension;import  java.awt.event.actionevent;import  java.awt.event.actionlistener;import  java.awt.event.keyevent;import  java.awt.event.windowadapter;import  java.awt.event.windowevent;import  java.io.ioexception;import  javax.swing.jframe;import  javax.swing.jlabel;import  javax.swing.jmenu;import  javax.swing.jmenubar;import  javax.swing.jmenuitem;import  javax.swing.joptionpane;import  javax.swing.jscrollpane;import  javax.swing.keystroke;import  javax.swing.border.bevelborder;import  javax.swing.border.softbevelborder;//  timerqueuepublic  class  skatest  {  public  static  final  int  width  =  500;  public  static  final  int  height  =  500;  public  static  final  int  canvas_x  =  100;  public  static  final  int  canvas_y  =  100;  public  static  final  int  canvas_frame_width  =  width+100;  public  static  final  int  canvas_frame_height  =  height  +  100;  public  static  final  int  exec_width  =  550;  public  static  final  int  exec_height  =  400;  static  vizdslist  dslist  =  new  vizdslist();  static  skacanvas  canvas  =  new  skacanvas(dslist);  static  jframe  canvasframe  =  new  jframe(""data  structure  canvas"");  static  jmenubar  menubar  =  new  jmenubar();  static  jmenu  algorithmmenu  =  new  jmenu(""algorithm"");  static  jmenu  dsmenu  =  new  jmenu(""create"");  static  jmenu  helpmenu  =  new  jmenu  (""help"");  static  jlabel  status  =  new  jlabel(""  "");  static  skaprogram[]  alg;  static  jframe  execframe[];  static  skaexecutionpanel  execpanel[];  public  static  void  setupframes(int  nalgs)  {int  i;  for  (i=0;  i  <  nalgs;  i++)  {  //  execframe[i]  =  new  jframe(""execution  control  panel  ""+(i+1));  execframe[i]  =  new  jframe();  execpanel[i]  =  new  skaexecutionpanel(execframe[i]);}canvas.setminimumsize(new  dimension(width'  '  height));canvasframe.setsize(canvas_frame_width'  '  canvas_frame_width);canvasframe.getcontentpane().setlayout(new  borderlayout(10'  '7));//  canvasframe.getcontentpane().setpreferredsize(new  dimension(width'  '  height));canvasframe.addwindowlistener(new  windowadapter()  {  public  void  windowclosing(windowevent  e)  {system.exit(0);  }});//  canvas.setminimumsize(new  dimension(width'  '  height));for  (i=0;  i  <  nalgs;  i++)  {  execframe[i].setsize(exec_width'  '  exec_height);  //  execframe[i].getcontentpane().setlayout(new  borderlayout(10'  '7));  execframe[i].addwindowlistener(new  windowadapter()  {public  void  windowclosing(windowevent  e)  {  system.exit(0);}  });  execpanel[i].setborder(new  softbevelborder(bevelborder.raised));  //  execframe[i].setcontentpane(execpanel[i]);  execframe[i].getcontentpane().add(""center""'  '  execpanel[i]);  //  execframe[i].setlocation(canvas_x  +canvas_frame_width'  '  canvas_y  +  i*exec_height);  execframe[i].setlocation(canvas_x  +canvas_frame_width  +  i*30'  '  canvas_y  +  i*50);}canvas.setborder(new  softbevelborder(bevelborder.raised));canvasframe.getcontentpane().add(""center""'  '  new  jscrollpane(canvas)  );//  canvasframe.getcontentpane().add(""center""'  '  new  jscrollpane(canvas'  '  scrollpaneconstants.vertical_scrollbar_always'  '  scrollpaneconstants.horizontal_scrollbar_always)  );canvasframe.getcontentpane().add(""south""'  '  status);canvasframe.setlocation(canvas_x'  '  canvas_y);jmenu  filemenu  =  new  jmenu(""file"");jmenuitem  quititem  =  new  jmenuitem(""quit"");//todo  add  quit  listenerquititem.addactionlistener(new  actionlistener  (){  public  void  actionperformed(actionevent  arg0)  {  //system.exit(0);  int  again  =  joptionpane.showconfirmdialog(null'  '  ""are  you  sure  you  want  to  exit  system""'  '  ""exiting""'  '  joptionpane.yes_no_option);  if  (again  ==  joptionpane.yes_option)  {  system.exit(0);  }  }});filemenu.add(quititem);menubar.add(filemenu);menubar.add(algorithmmenu);  //  menubar.add(dsmenu);menubar.add(helpmenu);jmenuitem  help  =  new  jmenuitem  (""help  contents"");//help.setmnemonic(keyevent.vk_h);//todo  fix  this  methodhelp.setaccelerator(keystroke.getkeystroke(keyevent.vk_f1'  '  actionevent.ctrl_mask));help.addactionlistener(new  actionlistener(){/*  @override  public  void  actionperformed(actionevent  arg0)  {  joptionpane.showmessagedialog(null'  '  ""alot  of  the  functionality  have  not  yet  been  included  in  this  versioncurrently  working  on  the  automation  features  now!""'  '  ""ska  0.2  beta""'  '  joptionpane.warning_message);  }*/  public  void  actionperformed(actionevent  arg0)  {  try  {  runtime.getruntime().exec(""hh.exe  c:/ska.chm"");  }  catch  (ioexception  e)  {  e.printstacktrace();  joptionpane.showmessagedialog(null'  '  ""file  not  found""'  '  ""error""'  '  joptionpane.error_message);  }  }});jmenuitem  about  =  new  jmenuitem  (""about  ska"");about.addactionlistener(new  actionlistener(){  public  void  actionperformed(actionevent  arg0)  {  joptionpane.showmessagedialog(null'  '  ""ska  version  0.1  beta"");  }});helpmenu.add(help);helpmenu.add(about);canvasframe.setjmenubar(menubar);  }  /**  the  create  menu  item*/  public  static  void  createprogram(int  i)  {jmenuitem  algitem;switch  (i)  {case  0  :alg[0]  =  new  redblackvalidate(canvas'  '  execpanel[0]);execframe[0].settitle(""validate  algorithm"");system.out.println(""validate  algorithm"");algitem  =  new  jmenuitem(""validate  algorithm"");algorithmmenu.add(algitem);break;  /*  case  0  :  alg[0]  =  new  breadthfirstsearch(canvas'  '  execpanel[0]);  execframe[0].settitle(""bfs  graph  algorithm"");  //  system.out.println(""breadthfirstsearch"");  algitem  =  new  jmenuitem(""bfs  graph  algorithm"");  algorithmmenu.add(algitem);  break;case  1:  alg[1]  =  new  levelorderalgorithm(canvas'  '  execpanel[1]);  execframe[1].settitle(""level  order  tree  algorithm"");  system.out.println(""levelorderalgorithm"");  algitem  =  new  jmenuitem(""level  order  tree  algorithm"");  algorithmmenu.add(algitem);  break;  case  2:  alg[2]  =  new  binarysearchtreealgrecursive(canvas'  '  execpanel[2]);  execframe[2].settitle(""binarytreesearchrec  algorithm"");  system.out.println(""binarytreesearchrec  algorithm"");  algitem  =  new  jmenuitem(""binarytreesearchrec  algorithm"");  algorithmmenu.add(algitem);  break;  case  3:  alg[3]  =  new  binarysearchtreealgiterative(canvas'  '  execpanel[3]);  execframe[3].settitle(""binarytreesearchiter  algorithm"");  system.out.println(""binarytreesearchiter  algorithm"");  algitem  =  new  jmenuitem(""binarytreesearchiter  algorithm"");  algorithmmenu.add(algitem);  break;  case  4:alg[4]  =  new  rebblacktreesearch  (canvas'  '  execpanel[4]);execframe[4].settitle(""red  black  search  algorithm"");system.out.println(""red  black  search  algorithm"");algitem  =  new  jmenuitem(""red  black  search  algoithm  algorithm"");algorithmmenu.add(algitem);break;case  5:alg[5]  =  new  arrayinsertionsortalg  (canvas'  '  execpanel[5]);execframe[5].settitle(""array  insertion  sort  algorithm"");system.out.println(""array  insertion  sort"");algitem  =  new  jmenuitem(""array  insertion  sort  algorithm"");algorithmmenu.add(algitem);break;case  6:alg[6]  =  new  arrayselectionsortalg  (canvas'  '  execpanel[6]);execframe[6].settitle(""array  selection  sort  algorithm"");system.out.println(""array  selectionsearch"");algitem  =  new  jmenuitem(""array  selection  sort  algorithm"");algorithmmenu.add(algitem);break;  */default:  break;  }  }  public  static  void  main(string  args[])  {int  i'  '  nalgs  =  1;  //nalgs  =  7;alg  =  new  skaprogram[nalgs];execpanel  =  new  skaexecutionpanel[nalgs];execframe  =  new  jframe[nalgs];//  canvas.setdebuggraphicsoptions(debuggraphics.buffered_option);setupframes(nalgs);canvasframe.setvisible(true);for  (i=0;  i  <  alg.length;  i++)  {  createprogram(i);  execframe[i].setvisible(true);  alg[i].start();  alg[i].displayalgorithm();}while  (true)  {  for  (i=0;  i  <  alg.length;  i++)  if  (execpanel[i].isreset())  {  alg[i].terminate();  createprogram(i);  alg[i].start();  execpanel[i].unreset();}  }  }}//  end  class  skatest;  package  ska;import  java.awt.font;import  java.awt.event.actionevent;import  java.awt.event.itemevent;import  java.awt.event.itemlistener;import  java.util.stack;import  javax.swing.abstractaction;import  javax.swing.action;import  javax.swing.jcombobox;import  javax.swing.jdesktoppane;import  javax.swing.jframe;import  javax.swing.jscrollpane;import  javax.swing.jtextarea;import  javax.swing.jtoolbar;@suppresswarnings(""serial"")publicclass  skaexecutionpanel  extends  jdesktoppane  {  public  static  final  int  exec_width  =  skatest.exec_width-100;  public  static  final  int  exec_height  =  skatest.exec_height-50;  boolean  run  =  false'  '  pause  =  true'  '  step  =  false'  '  reset  =  false;  jtoolbar  toolbar  =  new  jtoolbar();  jtextarea  textoutputarea  =  new  jtextarea();  skaprogram  prog;  stack<skafunction>  functionstack  =  new  stack<skafunction>();  skafunction  currentfunction  =  null;  int  level  =  0'  '  in  =  30;  public  void  docall(string[]  subalg'  '  string  subalgname)  {docall(subalg'  '  subalgname'  '  false);  //  make  non-icon  default  }  public  void  docall(string[]  subalg'  '  string  subalgname'  '  boolean  iconify)  {if  (currentfunction  !=  null)  functionstack.push(currentfunction);currentfunction  =  new  skafunction(this'  '  subalg'  '  subalgname'  '  iconify);add(currentfunction'  '  new  integer(1));currentfunction.setbounds(level*in'  'level*in'  'exec_width'  '  exec_height);//  currentfunction.setbounds(level*in'  'level*in'  'exec_width-(level+1)*in'  '  exec_height-(level+1)*in);currentfunction.setvisible(true);level++;  }  public  void  doreturn()  {if  (currentfunction  ==  null)  return;if  (currentfunction.makeiconwhendone())  {  getdesktopmanager().iconifyframe(currentfunction);  //  currentfunction.seticon(true);  currentfunction.seticonifiable(true);}else  currentfunction.setvisible(false);currentfunction  =  (skafunction)  functionstack.pop();level--;  }  public  void  displayalgorithm(string[]  a)  {docall(a'  '  ""main"");  }  public  void  displayalgorithm(string[]  a'  '  string  aname)  {docall(a'  '  aname);  }  public  void  setcontrolsenabled(boolean  b)  {toolbar.setenabled(b);  }  class  runaction  extends  abstractaction  {runaction()  {  super(""run"");}public  void  actionperformed(actionevent  e)  {  run  =  true;  pause  =  false;  step  =  false;}  }  class  stepaction  extends  abstractaction  {stepaction()  {  super(""step"");}public  void  actionperformed(actionevent  e)  {  run  =  false;  pause  =  false;  step  =  true;}  }  class  pauseaction  extends  abstractaction  {pauseaction()  {  super(""pause"");}public  void  actionperformed(actionevent  e)  {  pause  =  true;  //  system.out.print(""breaks"");  //  for  (int  i=0;  i<breaks.length;  i++)  //system.out.print(""[""  +i+  ""]=""  +  breaks[i].tostring()  +  """");  //  system.out.println("""");  }  }  class  resetaction  extends  abstractaction  {resetaction()  {  super(""reset"");  putvalue(action.short_description'  '  ""stop  program  and  reset  state  to  begining"");}public  void  actionperformed(actionevent  e)  {  run  =  false;  pause  =  true;  step  =  false;  //  should  also  restart  skaprogram  reset  =  true;  if  (currentfunction  !=  null)  currentfunction.reset();  /*  jinternalframe[]  frames  =  getallframes();  for  (int  i  =  0;  i  <  frames.length;  i++)  {  //  frames[i].dispose();  if  (frames[i].isicon())  frames[i].dispose();  }  */}  }  jcombobox  speedcontrol;  string  speednames[]  ={  ""slow""'  '  ""normal""'  '  ""fast""'  '  ""very  fast""  };  int  speeds[]  ={4000'  '  2000'  '  1000'  '  500}  ;  //  milliseconds  int  speed  =  speeds[1];  private  void  initspeedmenu()  {speedcontrol  =  new  jcombobox(speednames);//  speedcontrol.setmaximumrowcount(3);speedcontrol.additemlistener(  new  itemlistener()  {  public  void  itemstatechanged(  itemevent  e)  {speed  =  speeds[speedcontrol.getselectedindex()];  }});speedcontrol.setselectedindex(1);speedcontrol.setmaximumsize(speedcontrol.getpreferredsize());speedcontrol.settooltiptext(""execution  speed"");  }  skaexecutionpanel(jframe  frame)  {initspeedmenu();toolbar.add(new  runaction());toolbar.add(new  stepaction());toolbar.add(new  resetaction());toolbar.add(new  pauseaction());toolbar.addseparator();toolbar.add(speedcontrol);//  frame.getcontentpane().setlayout(new  borderlayout(10'  '7));//  maketable();frame.getcontentpane().add(""north""'  '  toolbar);font  f  =  new  font(""sansserif""'  '  font.bold'  '  14);textoutputarea.setfont(f);frame.getcontentpane().add(""south""'  '  new  jscrollpane(textoutputarea));//  frame.getcontentpane().add(this'  '  borderlayout.center)//  frame.getcontentpane().add(""center""'  '  toolbar'  '  borderlayout.north);//  setsize(300'  '250);//  add  toolbar'  '  table'  '  set  layout'  '  sizes  }  //  public  void  setalgorithm(skaprogram  p){  //prog  =  p;  //sendalgorithm(p.getpseudocode());  //  }  public  int  getspeed()  {  return  speed;  }  public  boolean  isrunning()  {  return  run;  }  public  boolean  ispaused()  {  return  pause;  }  public  boolean  isstepping()  {  return  step;  }  public  boolean  isreset()  {  return  reset;  }  public  void  pause()  {  pause  =  true;  }  public  void  unreset()  {  reset  =  false;  }  public  void  abouttowait()  {currentfunction.abouttowait();  }  public  void  donewait()  {currentfunction.donewait();  }  public  void  showtooltipvalue(string  s){currentfunction.showtooltipvalue(s);  }  public  void  showalglinebreak(int  i)  {currentfunction.showalglinebreak(i);  }  public  void  showalgline(int  i)  {currentfunction.showalgline(i);  }  public  void  displaytext(string  s)  {textoutputarea.append(s);//  +""""  add  newline?  }}  //  end  class  skaexecutionpanel"  ,i  have  written  an  applic  but  for  some  reason  it  keep  peak  at  i  ran  a  profil  r  on  a  few  of  the  class  and  a  report  show  that  isreset  and  isrun  seem  to  be  call  alot  of  time  do  you  see  anyth  wrong  pleas  inform  me  thank  class  is  the  onli  class  that  use  the  isreset  code  so  i  hope  this  help  u  guy  in  detect  the  error  ,  simpleassignmentexpress  objectvari  simplevari  instancefield  divideexpress  subtractexpress  constantinvoc  importstat  objectmethodinvoc  actualmethodparamet  objectcreationstat  constructorcal  forstat  lessexpress  postincrementexpress  arrayel  multiplyexpress  addexpress  stringliter  stringdatatyp  ifstat  equalexpress  notexpress  formalmethodparamet  trycatchstat  staticmethodspecifi  intdatatyp  switchstat  caseclaus  javalangsystemoutprintln  true  fals  genericobjectcreationstat  nulliniti  arraydatatyp  stringvari  booleandatatyp  notequalexpress  null  javalanginteg  wrapperclasscreationstat  wrapperclassconstructorcal  extendsspecif  constructordefinit  superclassconstructorcal  instancefieldinitializationstat             