 question  ,  "config.property;  tables:  table1  table2#for  table1table1.url:  jdbc:mysql://localhost:3306/gardentable1.user:  gardenertable1.password:  shaveltable1.driver:  jdbc-drivertable1.percentage:  80#for  table2table2.url:  jdbc:mysql://otherhost:3306/foresttable2.user:  forestertable2.password:  axetable2.driver:  jdbc-drivertable2.percentage:  20;  config.property  file;  readtableconnectioninfo  object;  private  static  hashmap<string'  '  readtableconnectioninfo>  tablelist  =  new  hashmap<string'  '  readtableconnectioninfo>();private  static  void  readpropertyfile()  throws  ioexception  {prop.load(read.class.getclassloader().getresourceasstream(""config.properties""));tablenames  =  arrays.aslist(prop.getproperty(""tables"").split(""  ""));for  (string  arg  :  tablenames)  {readtableconnectioninfo  ci  =  new  readtableconnectioninfo();string  url  =  prop.getproperty(arg  +  "".url"");string  user  =  prop.getproperty(arg  +  "".user"");string  password  =  prop.getproperty(arg  +  "".password"");string  driver  =  prop.getproperty(arg  +  "".driver"");double  percentage  =  double.parsedouble(prop.getproperty(arg  +  "".percentage""));ci.seturl(url);ci.setuser(user);ci.setpassword(password);ci.setdriver(driver);ci.setpercentage(percentage);tablelist.put(arg'  '  ci);}};  readtableconnectioninfo;  public  class  readtableconnectioninfo  {public  string  url;public  string  user;public  string  password;public  string  driver;public  string  percentage;public  string  geturl()  {return  url;}public  void  seturl(string  url)  {this.url  =  url;}public  string  getuser()  {return  user;}public  void  setuser(string  user)  {this.user  =  user;}public  string  getpassword()  {return  password;}public  void  setpassword(string  password)  {this.password  =  password;}public  string  getdriver()  {return  driver;}public  void  setdriver(string  driver)  {this.driver  =  driver;}public  double  getpercentage()  {return  percentage;}public  void  setpercentage(double  percentage)  {this.percentage  =  percentage;}};  tablelist  object;  readtask;  //  create  thread  pool  with  given  sizeexecutorservice  service  =  executors.newfixedthreadpool(10);for  (int  i  =  0;  i  <  10;  i++)  {service.submit(new  readtask(tablelist));};  readtask;  runnable  interface;  class  readtask  implements  runnable  {private  final  hashmap<string'  '  xmpreadtableconnectioninfo>  tablelists;public  readtask(hashmap<string'  '  readtableconnectioninfo>  tablelist)  {this.tablelists  =  tablelist;}@overridepublic  void  run()  {int  j  =  0;dbconnection  =  new  connection[tablelists.size()];statement  =  new  statement[tablelists.size()];//loop  around  the  map  values  and  make  the  connection  listfor  (readtableconnectioninfo  ci  :  tablelists.values())  {dbconnection[j]  =  getdbconnection(ci.geturl()'  '  ci.getuser()'  '  ci.getpassword()'  '  ci.getdriver());statement[j]  =  dbconnection[j].createstatement();j++;}while  (system.currenttimemillis()  <=  60  minutes)  {/*  generate  random  number  and  check  to  see  whether  that  random  number  *  falls  between  1  and  80'  '  if  yes'  '  then  choose  table1  *  and  then  use  table1  connection  and  statement  that  i  made  above  and  do  a  select  *  on  that  table.  *  if  that  random  numbers  falls  between  81  and  100  then  choose  table2  *  and  then  use  table2  connection  and  statement  and  do  a  select  *  on  that  table  */resultset  rs  =  statement[what_table_statement].executequery(selecttablesql);}  }};  table1.getpercentage();  table1;  table1  statement  object;  select  sql  call;  table2;  table2  statement  object;  select  sql  call;  random  number;  tables  percentage;  table  connection  and  statements;  select  sql  call;  getpercentage();  80  10  10;  class  readtask  implements  runnable  {private  connection[]  dbconnection  =  null;private  concurrenthashmap<readtableconnectioninfo'  '  connection>  tablestatement  =  new  concurrenthashmap<readtableconnectioninfo'  '  connection>();public  readtask(linkedhashmap<string'  '  xmpreadtableconnectioninfo>  tablelist)  {this.tablelists  =  tablelist;}@overridepublic  run()  {int  j  =  0;dbconnection  =  new  connection[tablelists.size()];//loop  around  the  map  values  and  make  the  connection  listfor  (readtableconnectioninfo  ci  :  tablelists.values())  {dbconnection[j]  =  getdbconnection(ci.geturl()'  '  ci.getuser()'  '  ci.getpassword()'  '  ci.getdriver());tablestatement.putifabsent(ci'  '  dbconnection[j]);j++;}random  random  =  new  securerandom();while  (  <  60  minutes)  {double  randomnumber  =  random.nextdouble()  *  100.0;readtableconnectioninfo  table  =  selectrandomconnection(randomnumber);for  (map.entry<readtableconnectioninfo'  '  connection>  entry  :  tablestatement.entryset())  {if  (entry.getkey().gettablename().equals(table.gettablename()))  {final  string  id  =  generaterandomid(random);final  string  selectsql  =  generaterandomsql(table);preparedstatement  =  entry.getvalue().preparecall(selectsql);preparedstatement.setstring(1'  '  id);rs  =  preparedstatement.executequery();}}}}private  string  generaterandomsql(readtableconnectioninfo  table)  {int  rnumber  =  random.nextint(table.getcolumns().size());list<string>  shuffledcolumns  =  new  arraylist<string>(table.getcolumns());collections.shuffle(shuffledcolumns);string  columnslist  =  """";for  (int  i  =  0;  i  <  rnumber;  i++)  {columnslist  +=  (""'  '""  +  shuffledcolumns.get(i));}final  string  sql  =  ""select  id""  +  columnslist  +  ""from  ""+  table.gettablename()  +  ""  where  id  =  ?"";return  sql;}private  readtableconnectioninfo  selectrandomconnection(double  randomnumber)  {double  limit  =  0;for  (readtableconnectioninfo  ci  :  tablelists.values())  {limit  +=  ci.getpercentage();if  (random.nextdouble()  <  limit)  {return  ci;}throw  new  illegalstateexception();}return  null;}}"  ,i  am  work  on  a  project  in  which  i  have  two  tabl  in  a  differ  databas  with  differ  schema  so  that  mean  i  have  two  differ  connect  paramet  for  those  two  tabl  to  connect  use  jdbc  let  suppos  below  is  the  file  below  method  will  read  the  abov  and  make  a  for  each  tabl  below  is  the  class  that  will  hold  all  the  tabl  connect  info  for  a  particular  tabl  now  i  am  creat  executorservic  for  specifi  number  of  thread  and  pass  this  to  constructor  of  class  below  is  my  that  implement  in  which  each  thread  is  suppos  to  make  a  connect  for  each  tablescurr  i  have  two  tabl  that  mean  each  thread  will  make  two  connect  for  each  tabl  and  then  use  that  particular  tabl  connect  for  do  select  on  that  tabl  depend  on  the  random  generat  number  i  am  have  hard  time  in  figur  out  how  should  appli  the  abov  algorithm  and  how  should  i  compar  the  with  each  and  then  decid  which  tabl  i  need  to  use  and  after  that  figur  out  which  i  need  to  use  to  make  a  so  that  mean  i  need  to  check  method  of  each  tabl  and  them  compar  with  the  random  number  right  now  i  have  onli  two  tabl  in  futur  i  can  have  three  tabl  with  percentag  distribut  might  be  as  ,  privatemethodspecifi  staticmethodspecifi  throwsspecif  objectmethodinvoc  actualmethodparamet  stringliter  stringdatatyp  simpleassignmentexpress  stringvari  publicfieldspecifi  instancefield  simplevari  returnstat  formalmethodparamet  instancefieldinvoc  thisrefer  doubledatatyp  arrayel  postincrementexpress  implementsspecif  methodimplement  arraydatatyp  privatefieldspecifi  instancefieldinitializationstat  objectcreationstat  constructorcal  multiplyexpress  intdatatyp  javautilarraylist  genericobjectcreationstat  stringinitializationstat  forstat  lessexpress  addassignmentexpress  finalfieldspecifi  foreachstat  ifstat  throwstat       intdatatyp  simplevari  arrayel  instancefieldinvoc  thisrefer  simpleassignmentexpress  postincrementexpress  formalmethodparamet  stringdatatyp  forstat  lessexpress  ifstat  greaterequalexpress  returnstat  instancefield  instancefieldinitializationstat  objectcreationstat  constructorcal  actualmethodparamet  objectmethodinvoc  