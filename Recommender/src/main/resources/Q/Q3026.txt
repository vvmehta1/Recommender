 question  ,  final  private  reentrantreadwritelock  shutdownlock  =  new  reentrantreadwritelock();volatile  private  int  activeworkerthreads;private  boolean  isshutdown;private  void  workertask(){  try  {//  point  a:  worker  tasks  mustn't  block  each  other.shutdownlock.readlock().lock();//  point  b:  i  only  want  worker  tasks  to  continue  if  the  shutdown  signal//  hasn't  already  been  received.if  (isshutdown)  return;activeworkerthreads  ++;//  point  c:  this  async  method  call  returns  immediately'  '  soon  after  which//  we  release  our  lock.  the  shutdown  thread  may  then  acquire  the  write  lock//  but  we  want  it  to  continue  blocking  until  all  of  the  asynchronous  tasks//  have  completed.executeasynchronously(new  runnable(){  @override  final  public  void  run()  {try{//  do  stuff.}finally{  //  point  d:  release  of  shutdown  thread  loop'  '  if  there  are  no  other  //  active  worker  tasks.  activeworkerthreads  --;}  }});  }  finally  {shutdownlock.readlock().unlock();  }}final  public  void  shutdown(){  try  {//  point  e:  shutdown  thread  must  block  while  any  worker  threads//  have  breached  point  a.shutdownlock.writelock().lock();isshutdown  =  true;//  point  f:  is  there  a  better  way  to  wait  for  this  signal?while  (activeworkerthreads  >  0)  ;//  do  shutdown  operation.  }  finally  {shutdownlock.writelock().unlock();  }}  ,im  tri  to  find  a  less  clunki  solut  to  a  java  concurr  problem  the  gist  of  the  problem  is  that  i  need  a  shutdown  call  to  block  while  there  are  still  worker  thread  activ  but  the  crucial  aspect  is  that  the  worker  task  are  each  spawn  and  complet  asynchron  so  the  hold  and  releas  must  be  done  by  differ  thread  i  need  them  to  somehow  send  a  signal  to  the  shutdown  thread  onc  their  work  has  complet  just  to  make  thing  more  interest  the  worker  thread  cannot  block  each  other  so  im  unsur  about  the  applic  of  a  semaphor  in  this  particular  instanc  i  have  a  solut  which  i  think  safe  doe  the  job  but  my  unfamiliar  with  the  java  concurr  util  lead  me  to  think  that  there  might  be  a  much  easier  or  more  eleg  pattern  ani  help  in  this  regard  would  be  great  appreci  here  what  i  have  so  far  fair  spars  except  for  the  comment  thank  in  advanc  for  ani  help  russ  ,       constant  constantinitializationstat  simpleassignmentexpress  objectcreationstat  constructorcal  actualmethodparamet  objectmethodinvoc        simpleassignmentexpress  genericobjectcreationstat  