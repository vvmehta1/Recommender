 question  ,  "private  static  final  object  lock  =  new  object();public  void  dosomething()  {...synchronized(lock)  {...}...};  httpsession  session  =  gethttpservletrequest().getsession();synchronized  (session)  {...};  getsession();  myhelper;  private  static  final  object  lock  =  new  object();public  static  object  getsessionlock(httpservletrequest  request)  {object  result  =  request.getsession().getattribute(""session_lock"");if  (result  ==  null)  {//  only  if  there  is  no  session-lock  object  in  the  session  we  apply  the  global  locksynchronized  (lock)  {//  as  it  can  be  that  another  thread  has  updated  the  session-lock  object  in  the  meantime'  '  we  have  to  read  it  again  from  the  session  and  create  it  only  if  it  is  not  there  yet!result  =  request.getsession().getattribute(""session_lock"");if  (result  ==  null)  {result  =  new  object();request.getsession().setattribute(""session_lock""'  '  result);}}}return  result;};  object  sessionlock  =  myhelper.getsessionlock(getrequest());synchronized  (sessionlock)  {...}"  ,  solut  right  after  question  usual  synchron  is  serial  parallel  request  within  a  jvm  eg  when  look  at  web  applic  some  synchron  on  jvm  global  scope  is  mayb  becom  a  perform  bottleneck  and  synchron  onli  within  the  scope  of  the  user  would  make  more  sens  is  the  follow  code  a  possibl  i  doubt  that  synchron  on  the  session  object  is  a  good  idea  but  it  would  be  interest  to  hear  your  thought  is  it  guarante  that  the  session  object  is  for  all  thread  process  request  from  the  same  user  it  seem  that  the  session  object  itself  is  not  alway  the  same  as  it  depend  on  the  implement  of  the  servlet  contain  tomcat  glassfish  and  the  method  might  return  just  a  wrapper  instanc  here  is  my  code  propos  feedback  is  welcom  somewher  in  a  helper  class  eg  and  then  you  can  use  it  ani  comment  on  this  solut  ,  objectvari  simplevari  simpleassignmentexpress  objectmethodinvoc  actualmethodparamet  stringliter  stringdatatyp  ifstat  equalexpress  null  objectcreationstat  constructorcal  instancefield  instancefieldinitializationstat    objectmethodinvoc  simpleassignmentexpress           actualmethodparamet  fals  simpleassignmentexpress        constant  constantinitializationstat  javalangobject  simpleassignmentexpress  objectcreationstat  constructorcal  objectmethodinvoc  actualmethodparamet  ifstat  equalexpress  null  returnstat  