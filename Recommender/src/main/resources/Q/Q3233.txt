 question  ,  "class  consumer  implements  runnable  {private  final  blockingqueue  queue;consumer(blockingqueue  q)  {queue  =  q;}public  void  run()  {try  {while(true)  {  system.out.println(""waiting  for  input"");consume(queue.take());  }}  catch  (interruptedexception  ex)  {  ex.printstacktrace();}}void  consume(object  x)  {  system.out.println(""received:  ""  +  x);}}class  setup  {public  static  void  main(string...args)  {blockingqueue  q  =  new  arrayblockingqueue<string>(10);producer  p  =  new  producer(q);consumer  c1  =  new  consumer(q);consumer  c2  =  new  consumer(q);new  thread(p).start();new  thread(c1).start();new  thread(c2).start();}}"  ,i  have  a  set  of  thread  where  each  thread  has  to  wait  for  it  requir  input  do  some  comput  and  final  send  it  output  valu  to  specif  thread  i  plan  to  have  global  map  contain  the  name  of  the  thread  and  the  thread  itself  in  order  to  let  each  thread  get  it  successor  thread  by  name  and  then  send  them  the  valu  first  i  look  at  the  producerconsum  exampl  use  block  queue  i  thought  i  could  have  a  block  queue  for  each  thread  a  consum  thread  would  then  be  loop  over  queuetak  until  it  receiv  all  the  desir  valu  later  i  found  this  where  a  similar  question  to  mine  is  ask  the  solut  propos  seem  to  be  easier  than  the  block  queue  solut  it  is  base  on  just  call  a  method  on  the  thread  i  want  so  send  the  messag  to  i  would  like  to  ask  you  for  some  advic  sinc  i  think  it  is  a  common  scenario  on  which  of  the  two  approach  would  be  the  best  or  if  there  is  a  better  way  to  achiev  what  i  wantthank  you  veri  much  for  your  help  , 