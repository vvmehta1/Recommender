 question  ,  "public  class  maze  {private  int  size;private  string[][]  board;private  int  total;  //#  of  boardsprivate  int  ex;private  int  ey;private  int  mx;private  int  my;public  maze(  int  size'  '  string[][]  board  ){  this.size  =  size;  this.board  =  board;  total  =  0;}private  void  find(  string  c  ){  int  x=0'  '  y=0;  for(  int  i  =  0;  i  <  size;  i++  )  {  for(  int  j  =  0;  j  <  size;  j++  )  {  if(  board[i][j].equals(c)  )  {  x  =  i;  y  =  j;  }  }  }  if(  c.equals(""m"")  )  {  mx  =  x;  my  =  y;  }  else  if(  c.equals(""e"")  )  {  ex  =  x;  ey  =  y;  }}public  void  findpath(){  find(  ""m""  );  find(  ""e""  );  findnext(  mx'  '  my  );}public  void  findnext(  int  x'  '  int  y  ){  string  last  =  board[x][y];if(  board[x][y].equals(""p"")  )  board[x][y]  =  ""1"";  board[x][y]  =  ""p"";  if(  rightavailability(x'  'y)  )  {  findnext(x+1'  '  y);  }  else  if(  leftavailability(x'  'y)  )  {  findnext(x-1'  '  y);  }  else  if(  aboveavailability(x'  'y)  )  {  findnext(x'  '  y+1);  }  else  if(  belowavailability(x'  'y)  )  {  findnext(x'  '  y-1);  }  else  {  total++;  printboard();  }  board[x][y]=  last;}public  boolean  rightavailability(  int  x'  '  int  y  ){  if(  x+1  >=  size  )  return  false;  else  if(  board[x+1][y].equals(""1"")  )  return  false;  else  if(  board[x+1][y].equals(""p"")  )  return  false;  else  return  true;}public  boolean  leftavailability(  int  x'  '  int  y  ){  if(  x-1  <  0)  return  false;  else  if(  board[x-1][y].equals(""1"")  )  return  false;  else  if(  board[x-1][y].equals(""p"")  )  return  false;  else  return  true;}public  boolean  aboveavailability(  int  x'  '  int  y  ){  if(  y+1  >=  size  )  return  false;  else  if(  board[x][y+1].equals(""1"")  )  return  false;  else  if(  board[x][y+1].equals(""p"")  )  return  false;  else  return  true;}public  boolean  belowavailability(  int  x'  '  int  y  ){  if(  y-1  <  0)  return  false;  else  if(  board[x][y-1].equals(""1"")  )  return  false;  else  if(  board[x][y-1].equals(""p"")  )  return  false;  else  return  true;}public  void  printboard(){  system.out.println(  ""the  board  number  ""  +total+  ""  is:  "");  for(int  i=0;  i<  size;  i++  )  {  for(int  j=0;  j<  size;  j++  )  {  if(  (i==mx)  &&  (j==my)  )  {  system.out.print(""m"");  }  else  if(  (i==ex)  &&  (j==ey)  )  {  system.out.print(""e"");  }  else  if(  board[i][j].equals(""1"")  )  {  system.out.print(""1"");  }  else  if(  board[i][j].equals(""0"")  )  {  system.out.print(""0"");  }  else  {  system.out.print(""p"");  }  }  system.out.println();  }}};  public  class  mazetester  {public  static  void  main(string[]  args)  {  int  size  =  11;  string[][]  board  =  new  string[][]  {  {""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""}'  '  {""1""'  '""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""1""'  '""0""'  '""0""'  '""0""'  '""1""}'  '  {""1""'  '""0""'  '""1""'  '""0""'  '""0""'  '""0""'  '""1""'  '""0""'  '""1""'  '""0""'  '""1""}'  '  {""e""'  '""0""'  '""1""'  '""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""1""'  '""0""'  '""1""}'  '  {""1""'  '""0""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""0""'  '""1""'  '""0""'  '""1""}'  '  {""1""'  '""0""'  '""1""'  '""0""'  '""1""'  '""0""'  '""0""'  '""0""'  '""1""'  '""0""'  '""1""}'  '  {""1""'  '""0""'  '""0""'  '""0""'  '""1""'  '""0""'  '""1""'  '""0""'  '""0""'  '""0""'  '""1""}'  '  {""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""0""'  '""1""'  '""0""'  '""0""'  '""0""'  '""1""}'  '  {""1""'  '""0""'  '""1""'  '""m""'  '""1""'  '""0""'  '""1""'  '""0""'  '""0""'  '""0""'  '""1""}'  '  {""1""'  '""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""1""'  '""0""'  '""0""'  '""0""'  '""1""}'  '  {""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""}'  '  };  maze  m  =  new  maze(  size'  '  board  );  m.findpath();}};  the  board  number  1  is:  111111111111ppppp1ppp11p1ppp1p1p1ep1ppppp1p1101111101p110101ppp1p110001p1ppp111111p1pp01101m1p1pp01100ppp1pp0111111111111the  board  number  2  is:  111111111111ppppp1ppp11p1ppp1p1p1ep100ppp1p1101111101p110101ppp1p110001p1ppp111111p1pp01101m1p1pp01100ppp1pp0111111111111the  board  number  348  is:  111111111111ppppp100011p1ppp10101ep1ppppp1011011111p10110101ppp10110001p1000111111p10001101m1p10001100ppp1000111111111111"  ,i  am  tri  to  write  a  program  that  is  given  a  maze  and  tri  to  find  the  way  out  m  is  the  entranc  e  is  the  exit  s  are  wall  and  s  are  pathway  it  is  suppos  to  find  each  path  and  put  p  in  the  path  it  is  suppos  to  find  all  avail  path  right  now  it  find  part  of  a  path  here  is  the  code  here  is  the  tester  here  is  the  current  output  edit  i  ad  if  boardxyequalsp  boardxi  at  the  begin  of  findindex  i  also  fix  the  x  problem  i  updat  the  output  to  what  i  am  get  now  it  is  actual  print  similar  board  ,  multidimensionalarraydatatyp  simplevari  instancefieldinvoc  thisrefer  simpleassignmentexpress  formalmethodparamet  privatemethodspecifi  intdatatyp  forstat  nestedforloop  lessexpress  postincrementexpress  ifstat  javalangstringequ  objectmethodinvoc  actualmethodparamet  arrayel  ifelseifstat  stringliter  stringdatatyp  stringvari  addexpress  subtractexpress  booleandatatyp  greaterequalexpress  returnstat  fals  ifelsestat  true  staticmethodspecifi  instancefield    