 question  ,  "package  org.tts.maqraa.service;import  java.util.collection;import  java.util.iterator;import  java.util.list;import  java.util.set;import  javax.persistence.entitymanager;import  javax.persistence.entitynotfoundexception;import  javax.persistence.persistencecontext;import  javax.persistence.persistencecontexttype;import  javax.persistence.query;import  org.springframework.transaction.annotation.propagation;import  org.springframework.transaction.annotation.transactional;import  org.slf4j.logger;import  org.slf4j.loggerfactory;/**  *  parts  of  this  code  have  been  copied  from  jarvana  site.  *  *  @author  younis  alomoush  *  */@transactional(propagation=propagation.required)public  abstract  class  abstractmaqraaservice  implements  maqraaservice  {private  logger  logger  =  loggerfactory.getlogger(this.getclass());private  int  defaultmaxresults  =  default_max_results;@persistencecontext(type=persistencecontexttype.transaction)private  entitymanager  em;/**  *  the  {@link  entitymanager}  which  is  used  by  all  query  manipulation  and  *  execution  in  this  dao.  *  *  @return  the  {@link  entitymanager}  */publicentitymanager  getentitymanager(){return  em;}/*  *  (non-javadoc)  *  *  @see  org.skyway.spring.util.dao.jpadao#gettypes()  */public  abstract  set<class<?>>  gettypes();/*  *  (non-javadoc)  *  *  @see  org.skyway.spring.util.dao.jpadao#store(java.lang.object)  */@transactional(propagation  =  propagation.required)public  <t  extends  object>  t  store(t  tostore)  {return  getentitymanager().merge(tostore);}/*  *  (non-javadoc)  *  *  @see  org.skyway.spring.util.dao.jpadao#remove(java.lang.object)  */@transactional(propagation  =  propagation.required)public  void  remove(object  toremove)  {toremove  =  getentitymanager().merge(toremove);getentitymanager().remove(toremove);}/*  *  (non-javadoc)  *  *  @see  org.skyway.spring.util.dao.jpadao#flush()  */@transactional(propagation  =  propagation.required)public  void  flush()  {getentitymanager().flush();}/*  *  (non-javadoc)  *  *  @see  org.skyway.spring.util.dao.jpadao#refresh(java.lang.object)  */@transactional(propagation  =  propagation.supports)public  void  refresh(object  o)  {try  {if  (o  !=  null)  {if  (o  instanceof  java.util.collection)  {for  (iterator<?>  i  =  ((collection<?>)  o).iterator();  i.hasnext();)  {try  {refresh(i.next());}  catch  (entitynotfoundexception  x)  {//  this  entity  has  been  deleted  -  remove  it  from  the//  collectioni.remove();}}}  else  {if  (gettypes().contains(o.getclass()))  {getentitymanager().refresh(o);}}}}  catch  (entitynotfoundexception  x)  {//  this  entity  has  been  deleted}}/*  *  (non-javadoc)  *  *  @see  org.skyway.spring.util.dao.jpadao#setdefaultmaxresults(int)  */@transactional(propagation  =  propagation.supports)public  void  setdefaultmaxresults(int  defaultmaxresults)  {this.defaultmaxresults  =  defaultmaxresults;}/*  *  (non-javadoc)  *  *  @see  org.skyway.spring.util.dao.jpadao#getdefaultmaxresults()  */public  int  getdefaultmaxresults()  {return  defaultmaxresults;}/*  *  (non-javadoc)  *  *  @see  *  org.skyway.spring.util.dao.jpadao#executequerybynamesingleresult(java  *  .lang.string)  */@suppresswarnings(""unchecked"")public  <t  extends  object>  t  executequerybynamesingleresult(string  queryname)  {return  (t)  executequerybynamesingleresult(queryname'  '  (object[])  null);}/*  *  (non-javadoc)  *  *  @see  *  org.skyway.spring.util.dao.jpadao#executequerybynamesingleresult(java  *  .lang.string'  '  java.lang.object[])  */@suppresswarnings(""unchecked"")public  <t  extends  object>  t  executequerybynamesingleresult(string  queryname'  '  object...  parameters)  {query  query  =  createnamedquery(queryname'  '  default_first_result_index'  '1'  '  parameters);return  (t)  query.getsingleresult();}/*  *  (non-javadoc)  *  *  @see  *  org.skyway.spring.util.dao.jpadao#executequerybyname(java.lang.string)  */public  <t  extends  object>  list<t>  executequerybyname(string  queryname)  {return  executequerybyname(queryname'  '  default_first_result_index'  'getdefaultmaxresults());}/*  *  (non-javadoc)  *  *  @see  *  org.skyway.spring.util.dao.jpadao#executequerybyname(java.lang.string'  '  *  java.lang.integer'  '  java.lang.integer)  */public  <t  extends  object>  list<t>  executequerybyname(string  queryname'  'integer  firstresult'  '  integer  maxresults)  {return  executequerybyname(queryname'  '  firstresult'  '  maxresults'  '(object[])  null);}/*  *  (non-javadoc)  *  *  @see  *  org.skyway.spring.util.dao.jpadao#executequerybyname(java.lang.string'  '  *  java.lang.object[])  */public  <t  extends  object>  list<t>  executequerybyname(string  queryname'  'object...  parameters)  {return  executequerybyname(queryname'  '  default_first_result_index'  'getdefaultmaxresults()'  '  parameters);}/*  *  (non-javadoc)  *  *  @see  *  org.skyway.spring.util.dao.jpadao#executequerybyname(java.lang.string'  '  *  java.lang.integer'  '  java.lang.integer'  '  java.lang.object[])  */@suppresswarnings(""unchecked"")public  <t  extends  object>  list<t>  executequerybyname(string  queryname'  'integer  firstresult'  '  integer  maxresults'  '  object...  parameters)  {query  query  =  createnamedquery(queryname'  '  firstresult'  '  maxresults'  'parameters);return  query.getresultlist();}/*  *  (non-javadoc)  *  *  @see  org.skyway.spring.util.dao.jpadao#createnamedquery(java.lang.string'  '  *  java.lang.integer'  '  java.lang.integer)  */public  query  createnamedquery(string  queryname'  '  integer  firstresult'  'integer  maxresults)  {return  createnamedquery(queryname'  '  firstresult'  '  maxresults'  '(object[])  null);}/*  *  (non-javadoc)  *  *  @see  org.skyway.spring.util.dao.jpadao#createnamedquery(java.lang.string'  '  *  java.lang.integer'  '  java.lang.integer'  '  java.lang.object[])  */public  query  createnamedquery(string  queryname'  '  integer  firstresult'  'integer  maxresults'  '  object...  parameters)  {query  query  =  getentitymanager().createnamedquery(queryname);if  (parameters  !=  null)  {for  (int  i  =  0;  i  <  parameters.length;  i++)  {query.setparameter(i  +  1'  '  parameters[i]);}}query.setfirstresult(firstresult  ==  null  ||  firstresult  <  0  ?  default_first_result_index:  firstresult);if  (maxresults  !=  null  &&  maxresults  >  0)query.setmaxresults(maxresults);return  query;}/*  *  (non-javadoc)  *  *  @see  org.skyway.spring.util.dao.jpadao#executequery(java.lang.string'  '  *  java.lang.integer'  '  java.lang.integer'  '  java.lang.object[])  */@suppresswarnings(""unchecked"")public  <t  extends  object>  list<t>  executequery(string  querystring'  'integer  firstresult'  '  integer  maxresults'  '  object...  parameters)  {query  query  =  createquery(querystring'  '  firstresult'  '  maxresults'  'parameters);return  query.getresultlist();}/*  *  (non-javadoc)  *  *  @see  org.skyway.spring.util.dao.jpadao#executequery(java.lang.string'  '  *  java.lang.object[])  */@suppresswarnings(""unchecked"")public  <t  extends  object>  list<t>  executequery(string  querystring'  'object...  parameters)  {query  query  =  createquery(querystring'  '  default_first_result_index'  'getdefaultmaxresults()'  '  parameters);return  query.getresultlist();}/*  *  (non-javadoc)  *  *  @see  *  org.skyway.spring.util.dao.jpadao#executequerysingleresult(java.lang.  *  string)  */@suppresswarnings(""unchecked"")public  <t  extends  object>  t  executequerysingleresult(string  querystring)  {return  (t)  executequerysingleresult(querystring'  '  (object[])  null);}/*  *  (non-javadoc)  *  *  @see  *  org.skyway.spring.util.dao.jpadao#executequerysingleresult(java.lang.  *  string'  '  java.lang.object[])  */@suppresswarnings(""unchecked"")public  <t  extends  object>  t  executequerysingleresult(string  querystring'  'object...  parameters)  {query  query  =  createquery(querystring'  '  default_first_result_index'  '  1'  'parameters);return  (t)  query.getsingleresult();}/*  *  (non-javadoc)  *  *  @see  org.skyway.spring.util.dao.jpadao#createquery(java.lang.string'  '  *  java.lang.integer'  '  java.lang.integer)  */public  query  createquery(string  querystring'  '  integer  firstresult'  'integer  maxresults)  {return  createquery(querystring'  '  firstresult'  '  maxresults'  '(object[])  null);}/*  *  (non-javadoc)  *  *  @see  org.skyway.spring.util.dao.jpadao#createquery(java.lang.string'  '  *  java.lang.integer'  '  java.lang.integer'  '  java.lang.object[])  */public  query  createquery(string  querystring'  '  integer  firstresult'  'integer  maxresults'  '  object...  parameters)  {query  query  =  getentitymanager().createquery(querystring);if  (parameters  !=  null)  {for  (int  i  =  0;  i  <  parameters.length;  i++)  {query.setparameter(i  +  1'  '  parameters[i]);}}query.setfirstresult(firstresult  ==  null  ||  firstresult  <  0  ?  default_first_result_index:  firstresult);if  (maxresults  !=  null  &&  maxresults  >  0)query.setmaxresults(maxresults);return  query;}public  final  void  log(loglevel  loglevel'  '  string  message'  'object...  messageparam)  {switch  (loglevel)  {case  trace:if  (logger.istraceenabled())  {logger.trace(message'  '  messageparam);}break;case  debug:if  (logger.isdebugenabled())  {logger.debug(message'  '  messageparam);}break;case  info:if  (logger.isinfoenabled())  {logger.info(message'  '  messageparam);}break;case  warn:if  (logger.iswarnenabled())  {logger.warn(message'  '  messageparam);}break;case  error:if  (logger.iserrorenabled())  {logger.error(message'  '  messageparam);}break;default:throw  new  illegalargumentexception(""log  level  is  not  defined:  ""+  loglevel);}}public  final  void  log(loglevel  loglevel'  'string  message'  '  throwable  throwable)  {switch  (loglevel)  {case  trace:if  (logger.istraceenabled())  {logger.trace(message'  '  throwable);}break;case  debug:if  (logger.isdebugenabled())  {logger.debug(message'  '  throwable);}break;case  info:if  (logger.isinfoenabled())  {logger.info(message'  '  throwable);}break;case  warn:if  (logger.iswarnenabled())  {logger.warn(message'  '  throwable);}break;case  error:if  (logger.iserrorenabled())  {logger.error(message'  '  throwable);}break;default:throw  new  illegalargumentexception(""log  level  is  not  defined:  ""+  loglevel);}}public  enum  loglevel{trace'  '  debug'  '  info'  '  warn'  '  error;}};  package  org.tts.maqraa.service;import  java.lang.annotation.annotation;import  java.util.hashset;import  java.util.list;import  java.util.set;import  org.tts.maqraa.data.student;public  class  studentsservice  extends  abstractmaqraaservice  {@overridepublic  set<class<?>>  gettypes()  {set<class<?>>  set  =  new  hashset<class<?>>();set.add(student.class);return  set;}public  student  registerstudent(student  student)  {annotation  []  annotation  =  studentsservice.class.getannotations();system.out.println(annotation);return  this.store(student);}public  student  editstudent(student  student){return  this.store(student);}public  void  deregisterstudent(student  student){this.remove(student);}public  list<student>  findallstudents(){return  this.executequerybyname(""student.findall"");}}"  ,im  use  spring  framework  transact  annot  for  transact  manag  and  i  have  an  abstract  class  annot  transact  as  seen  below  also  i  have  anoth  concret  classif  you  notic  that  the  method  regist  student  has  alreadi  provid  code  for  examin  the  annot  where  im  realli  find  the  transact  annot  that  is  a  contradict  where  i  have  anoth  link  talk  about  inherit  of  annot  and  it  say  that  there  is  no  inherit  at  all  review  this  linkcan  anyon  help  me  to  solv  this  contradict  ,  simpleassignmentexpress  arrayel  actualmethodparamet  stringliter  stringdatatyp  lessexpress  greaterexpress  stringvari  simplevari  returnstat  explicittypecast  objectmethodinvoc  formalmethodparamet  javalanginteg  objectvari  ifelsestat  nestedforloop  notequalexpress  null  intdatatyp  forstat  arraylength  postincrementexpress  finalmethodspecifi  switchstat  caseclaus  ifstat  instancefield  publicfieldspecifi  importstat  extendsspecif  classdefinit  publicclassspecifi  methoddefinit    simpleassignmentexpress  