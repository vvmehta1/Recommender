 question  ,  "import  java.io.bufferedreader;import  java.io.dataoutputstream;import  java.io.ioexception;import  java.io.inputstreamreader;import  java.net.socket;import  java.net.serversocket;import  java.util.linkedlist;import  java.util.concurrent.blockingqueue;import  java.util.concurrent.linkedblockingqueue;public  class  prog4_server  {//  a  queue  of  strings  used  to  hold  out  bound  messages//  it  blocks  till  on  is  availablestatic  blockingqueue<string>  outboundmessages  =  new  linkedblockingqueue<string>();//  a  linked  list  of  data  output  streams//  to  all  the  clientsstatic  linkedlist<dataoutputstream>  outputstreams;//  public  variables  to  track  the  number  of  clients//  and  the  state  of  the  serverstatic  boolean  serverstate  =  true;static  int  clients  =  0;public  static  void  main(string[]  args)  throws  ioexception{//create  a  server  socket  and  a  clientsocketserversocket  serversocket  =  null;try  {serversocket  =  new  serversocket(6789);}  catch  (ioexception  e)  {system.out.println(""could  not  listen  on  port:  6789"");system.exit(-1);}//  try{...}catch(ioexception  e){...}socket  clientsocket;//  start  the  output  thread  which  waits  for  elements//  in  the  message  queueoutputthread  out  =  new  outputthread();out.start();while(serverstate){try  {//  wait  and  accept  a  new  client//  pass  the  socket  to  a  new  input  threadclientsocket  =  serversocket.accept();dataoutputstream  serverout  =  new  dataoutputstream(clientsocket.getoutputstream());inputthread  in  =  new  inputthread(clientsocket'  '  clients);in.start();outputstreams.add(serverout);}  catch  (ioexception  e)  {system.out.println(""accept  failed:  6789"");system.exit(-1);}//  try{...}catch{..}//  increment  the  number  of  clients  and  reportclients  =  clients++;system.out.println(""client  #""  +  clients  +  ""accepted"");}//while(serverstate){...}//public  static  void  mainpublic  static  class  outputthread  extends  thread  {//outputthread  class  constructoroutputthread()  {}//outputthread(...){...public  void  run()  {//string  variable  to  contain  the  messagestring  msg  =  null;while(!this.interrupted())  {try  {msg  =  outboundmessages.take();for(int  i=0;i<outputstreams.size();i++){outputstreams.get(i).writebytes(msg  +  '');}//  for(...){...  }  catch  (ioexception  e)  {system.out.println(e);  }  catch  (interruptedexception  e){  system.out.println(e);  }//try{...}catch{...}}//while(...){}//public  void  run(){...}//  public  outputthread(){...public  static  class  inputthread  extends  thread  {boolean  threadstate  =  true;bufferedreader  serverin;string  user;int  threadid;//socketthread  class  constructorinputthread(socket  clientsocket'  '  int  id)  {threadid  =  id;try{serverin  =  new  bufferedreader(new  inputstreamreader(clientsocket.getinputstream()));user  =  serverin.readline();}catch(ioexception  e){system.out.println(e);}}//  inputthread(...){...public  void  run()  {string  msg  =  null;while  (threadstate)  {try  {msg  =  serverin.readline();if(msg.equals(""exitexit"")){//  if  the  client  is  exiting  close  the  thread//  close  the  output  stream  with  the  same  id//  and  decrement  the  number  of  clientsthreadstate  =  false;outputstreams.get(threadid).close();outputstreams.remove(threadid);clients  =  clients--;if(clients  ==  0){//  if  the  number  of  clients  has  dropped  to  zero//  close  the  serverserverstate  =  false;serverin.close();}//  if(clients  ==  0){...}else{//  add  a  message  to  the  message  queueoutboundmessages.add(user  +  "":  ""  +  msg);}//if..else...}  catch  (ioexception  e)  {system.out.println(e);}//  try  {  ...  }  catch  {  ...}}//  while}//  public  void  run()  {  ...}public  static  class  serverthread  extends  thread  {//public  variable  declarationbufferedreader  userin  =new  bufferedreader(new  inputstreamreader(system.in));//outputthread  class  constructorserverthread()  {}//outputthread(...){...public  void  run()  {//string  variable  to  contain  the  messagestring  msg  =  null;try  {//while  loop  will  continue  until//exit  command  is  received//then  send  the  exit  command  to  all  clientsmsg  =  userin.readline();while  (!msg.equals(""exitexit""))  {system.out.println(""enter  message:  "");msg  =  userin.readline();}//while(...){outboundmessages.add(msg);serverstate  =  false;userin.close();}  catch  (ioexception  e)  {system.out.println(e);}//try{...}catch{...}}//public  void  run(){...}//  public  serverthread(){...}//  public  class  prog4_server"  ,i  am  work  on  a  java  program  that  is  essenti  a  chat  room  this  is  an  assign  for  class  so  no  code  pleas  i  am  just  have  some  issu  determin  the  most  feasibl  way  to  handl  what  i  need  to  do  i  have  a  server  program  alreadi  setup  for  a  singl  client  use  thread  to  get  the  data  input  stream  and  a  thread  to  handl  send  on  the  data  output  stream  what  i  need  to  do  now  is  creat  a  new  thread  for  each  incom  request  my  thought  is  to  creat  a  link  list  to  contain  either  the  client  socket  or  possibl  the  thread  where  i  am  stumbl  is  figur  out  how  to  handl  send  the  messag  out  to  all  the  client  if  i  have  a  thread  for  each  incom  messag  how  can  i  then  turn  around  and  send  that  out  to  each  client  socketim  think  that  if  i  had  a  linkedlist  of  the  clientsocket  i  could  then  travers  the  list  and  send  it  out  to  each  one  but  then  i  would  have  to  creat  a  dataoutputstream  each  time  could  i  creat  a  linkedlist  of  dataoutputstream  sorri  if  it  sound  like  im  rambl  but  i  dont  want  to  just  start  code  this  it  could  get  messi  without  a  good  plan  thank  i  decid  to  post  the  code  i  have  so  far  i  havent  had  a  chanc  to  test  it  yet  so  ani  comment  would  be  great  thank  ,  objectmethodinvoc  actualmethodparamet  instancefield  simplevari  javalangsystemoutprintln  stringliter  stringdatatyp 