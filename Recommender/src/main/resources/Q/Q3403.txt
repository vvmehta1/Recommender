 question  ,  "restful  service;  future;  callables;  public  class  timeoutthreadexample  {private  executorservice  executor  =  executors.newfixedthreadpool(10);public  string  getdata()  {future<string>  future  =  executor.submit(new  task());string  response  =  null;try  {response  =  future.get(100'  '  timeunit.milliseconds);}  catch  (timeoutexception  e)  {e.printstacktrace();}  catch  (interruptedexception  e)  {e.printstacktrace();}  catch  (executionexception  e)  {e.printstacktrace();}return  response;}};  task;  callable;  resttemplate;  class  task  implements  callable<string>  {private  resttemplate  resttemplate  =  new  resttemplate();public  string  call()  throws  exception  {string  url  =  ""some_url"";string  response  =  resttemplate.getforobject(url'  '  string.class);return  response;}};  demotest;  getdata;  timeoutthreadexample;  5000  times;  public  class  demotest  {  public  static  void  main(string[]  args)  {timeoutthreadexample  bc  =  new  timeoutthreadexample();for  (int  i  =  0;  i  <=  5000;  i++)  {//timertest  timer  =  timertest.getinstance();  //  line  1bc.getdata();//timer.getduration();  //  line  2}}}  ;  resttemplate;  task  class;  resttemplate;  resttemplate;  demotest;  resttemplate;  getdata;  public  class  timeoutthreadexample  {private  executorservice  executor  =  executors.newfixedthreadpool(10);private  resttemplate  resttemplate  =  new  resttemplate();public  string  getdata()  {future<string>  future  =  executor.submit(new  task(resttemplate));string  response  =  null;try  {response  =  future.get(100'  '  timeunit.milliseconds);}  catch  (timeoutexception  e)  {e.printstacktrace();}  catch  (interruptedexception  e)  {e.printstacktrace();}  catch  (executionexception  e)  {e.printstacktrace();}return  response;}};  taskclass;  class  task  implements  callable<string>  {private  resttemplate  resttemplate;public  task(resttemplate  resttemplate)  {this.resttemplate  =  resttemplate;}public  string  call()  throws  exception  {string  url  =  ""some_url"";string  response  =  resttemplate.getforobject(url'  '  string.class);return  response;}}"  ,i  am  work  on  a  project  in  which  i  need  to  make  a  http  url  call  to  my  server  which  is  run  which  return  back  the  respons  as  a  json  string  below  is  my  main  code  which  is  use  the  and  below  is  my  class  which  implement  the  interfac  and  use  the  and  now  i  have  below  code  in  anoth  class  which  call  the  method  in  class  sequenti  so  my  question  is  should  be  static  here  in  my  as  if  i  see  it  correct  i  am  recreat  the  whole  connect  pool  for  each  request  in  which  is  not  the  right  way  i  guessif  i  am  make  resttempl  static  then  i  see  better  perform  end  to  end  as  compar  to  non  static  after  comment  out  line  and  line  in  class  which  measur  the  perform  in  general  what  is  the  right  way  to  use  in  multithread  environ  current  i  am  call  sequenti  method  time  one  by  one  but  some  custom  will  call  it  in  a  multithread  way  so  need  to  know  what  is  the  best  way  to  have  resttempl  in  a  multithread  environ  may  be  to  use  connectionfactori  in  the  resttempl  constructor  ani  thought  and  below  my  ,  implementsspecif  methodimplement  privatefieldspecifi  instancefield  instancefieldinitializationstat  simpleassignmentexpress  objectcreationstat  constructorcal  throwsspecif  stringdatatyp  formalmethodparamet  staticmethodspecifi  simplevari  constructordefinit  publicconstructorspecifi  instancefieldinvoc  thisrefer  returnstat    