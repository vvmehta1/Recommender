 question  ,  enum;public  enum  singleton  {instance;public  void  dosomething(){  ...  }  };  double-checked  locking;public  class  singleton{private  volatile  static  singleton  instance;private  singleton(){}public  static  singleton  getinstance(){  if(instance  ==  null){  synchronized(singleton.class){  if(instance  ==  null){  instance  =  new  singleton();  }  }  }  return  instance;}  }  ,i  am  wonder  which  one  is  better  in  practic  in  a  multithread  environ  i  understand  singleton  as  enum  type  creat  an  instanc  when  the  class  is  load  other  than  that  i  dont  see  anyth  els  signific  is  there  ani  pros  and  con  ,  classdefinit  publicclassspecifi  privatefieldspecifi  volatilefieldspecifi  staticfieldspecifi  classfield  simplevari  constructordefinit  privateconstructorspecifi  methoddefinit  publicmethodspecifi  staticmethodspecifi  ifstat  equalexpress  null  simpleassignmentexpress  objectcreationstat  constructorcal  returnstat    classdefinit  publicclassspecifi  privatefieldspecifi  staticfieldspecifi  classfield  instancefieldinitializationstat  simpleassignmentexpress  objectcreationstat  constructorcal  constructordefinit  privateconstructorspecifi  methoddefinit  publicmethodspecifi  staticmethodspecifi  returnstat     classdefinit  publicclassspecifi  methoddefinit  publicmethodspecifi  voiddatatyp  simpleassignmentexpress  objectvari  simplevari  ifstat  equalexpress  null  returnstat  objectmethodinvoc  