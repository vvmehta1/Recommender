 question  ,  "import  java.util.concurrent.callable;import  java.util.concurrent.executorservice;import  java.util.concurrent.executors;import  java.util.concurrent.future;public  class  testthreadfailure  {public  static  void  main(string[]  args)  {int  size  =  1;executorservice  exec  =  executors.newfixedthreadpool(size);threadfailtask  worker  =  new  threadfailtask();future<integer>  result  =  exec.submit(worker);try  {integer  value  =  result.get();system.out.println(""result:  ""  +  value);}  catch  (throwable  t)  {system.out.println(""caught  failure:  ""  +  t.tostring());exec.shutdownnow();system.out.println(""stack  trace:"");t.printstacktrace();return;}throw  new  runtimeexception(""did  not  catch  failure  !!"");}public  static  class  threadfailtask  implements  callable<integer>  {@overridepublic  integer  call()  {int  nbuf  =  65536;double[][]  buf  =  new  double[nbuf][nbuf];return  new  integer((int)  buf[0][0]);}}}"  ,im  work  on  a  softwar  develop  framework  for  parallel  comput  i  need  a  robust  mechan  for  report  thread  except  dure  develop  know  where  except  came  from  has  high  valu  so  i  would  like  to  err  on  the  side  of  overreport  i  would  also  like  to  be  abl  to  handl  junit  test  in  thread  as  well  is  the  approach  below  reason  or  is  there  a  better  way  ,    objectvari  simplevari        