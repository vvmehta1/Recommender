 question  ,  "class  example  {static  object  o;volatile  static  boolean  setupdone;private  example()  {  /*  private  constructor  */  }getinstance()  {if(!setupdone)  {synchronized(example.class)  {if(/*still*/  !setupdone)  {o  =  new  string(""typically  a  more  complicated  operation"");  setupdone  =  true;}}}return  o;}}//  end  of  class;  boolean;  concurrenthashmap;  class  example  {static  concurrenthashmap<string'  '  object>  o  =  new  concurrenthashmap<string'  '  object>();static  volatile  concurrenthashmap<string'  '  boolean>  setupsdone  =  new  concurrenthashmap<string'  '  boolean>();private  example()  {  /*  private  constructor  */  }getinstance(string  groupid)  {if  (!setupsdone.containskey(groupid))  {setupsdone.put(groupid'  '  false);}if(!setupsdone.get(groupid))  {synchronized(example.class)  {if(/*still*/  !setupsdone.get(groupid))  {o.put(groupid'  '  new  string(""typically  a  more  complicated  operation""));  setupsdone.put(groupid'  '  true);  //  will  this  still  maintain  happens-before?}}}return  o.get(groupid);}}//  end  of  class;  object;  volatile;  hashmap;  put();  multithreadedhttpconnectionmanager;  httpclient;  httpclient;  concurrenthashmap;  volatile  boolean;  put();  concurrenthashmap"  ,so  far  i  have  use  doublecheck  lock  as  follow  now  becaus  we  have  group  of  thread  that  all  share  this  class  we  chang  the  to  a  as  follow  my  question  now  is  if  i  declar  a  standard  as  i  will  onli  get  a  happensbefor  relationship  establish  when  i  read  or  write  it  refer  therefor  write  an  element  within  that  object  if  it  is  eg  a  standard  perform  a  oper  on  it  will  establish  such  a  relationship  what  about  read  an  element  wouldnt  that  requir  to  read  the  refer  as  well  and  thus  establish  the  relationship  now  with  use  a  volatil  concurrenthashmap  to  it  ,  privatemethodspecifi  formalmethodparamet  ifstat  notexpress  objectmethodinvoc  actualmethodparamet  stringcreationstat  stringconstructorcal  stringliter  stringdatatyp  objectvari  simplevari    