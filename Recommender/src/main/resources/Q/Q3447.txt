 question  ,  "stop();  stop();  object.wait;  object.notify;  stop();  class  newthread  implements  runnable  {  string  name;  //  name  of  thread  thread  t;  boolean  suspendflag;  newthread(string  threadname)  {name  =  threadname;t  =  new  thread(this'  '  name);system.out.println(""new  thread:  ""  +  t);suspendflag  =  false;t.start();  //  start  the  thread  }  //  this  is  the  entry  point  for  thread.  public  void  run()  {try  {for(int  i  =  15;  i  >  0;  i--)  {  system.out.println(name  +  "":  ""  +  i);  thread.sleep(200);  synchronized(this)  {while(suspendflag)  {  wait();}}}}  catch  (interruptedexception  e)  {  system.out.println(name  +  ""  interrupted."");}system.out.println(name  +  ""  exiting."");  }  void  mysuspend()  {suspendflag  =  true;  }  synchronized  void  myresume()  {suspendflag  =  false;  notify();  }};  class  suspendresume  {  public  static  void  main(string  args[])  {newthread  ob1  =  new  newthread(""one"");newthread  ob2  =  new  newthread(""two"");try  {  thread.sleep(1000);  ob1.mysuspend();  system.out.println(""suspending  thread  one"");  thread.sleep(1000);  ob1.myresume();  system.out.println(""resuming  thread  one"");  ob2.mysuspend();  system.out.println(""suspending  thread  two"");  thread.sleep(1000);  ob2.myresume();  system.out.println(""resuming  thread  two"");}  catch  (interruptedexception  e)  {  system.out.println(""main  thread  interrupted"");}//  wait  for  threads  to  finishtry  {  system.out.println(""waiting  for  threads  to  finish."");  ob1.t.join();  ob2.t.join();}  catch  (interruptedexception  e)  {  system.out.println(""main  thread  interrupted"");}system.out.println(""main  thread  exiting."");  }}"  ,in  the  follow  exampl  howmethod  is  implement  what  should  be  done  instead  of  use  method  in  my  point  of  view  when  the  desir  state  is  suspend  the  thread  wait  use  when  the  thread  is  resum  the  target  thread  is  notifi  use  but  doubt  in  case  of  implent  of  in  the  below  exampl  ,             