 question  ,  dynprogmatrix  =  new  int[totalitems+1][capacity+1];for  (int  w  =  0;  w<=  capacity;  w++)dynprogmatrix[0][w]  =  0;for(int  i=0;  i<=totalitems;  i++)dynprogmatrix[i][0]  =  0;slice  =  math.max(1'  '(int)  math.floor((double)(dynprogmatrix[0].length)/threads.length));extra  =  (dynprogmatrix[0].length)  %  threads.length;barrier  =  new  cyclicbarrier(threads.length);for  (int  i  =  0;  i  <threads.length;  i++){threads[i]  =  new  knapsackthread(integer.tostring(i));}for  (int  i  =  0;  i  <  threads.length;  i++){threads[i].start();}for  (int  i  =  0;  i  <  threads.length;  i++){try  {threads[i].join();}  catch  (interruptedexception  e)  {e.printstacktrace();}}}public  void  run(){int  myrank  =  integer.parseint(this.getname());int  mylowbound;int  myhibound;if  (myrank  <  extra){mylowbound  =  myrank  *  (slice  +  1);myhibound  =  mylowbound  +  slice;}else{mylowbound  =  myrank  *  slice  +  extra;myhibound  =  mylowbound  +  slice  -  1;}if(myhibound  >  capacity){myhibound  =  capacity;}for(int  i  =  1;  i  <=  totalitems;  i++){for  (int  w  =  mylowbound;  w  <=  myhibound;  w++){if  (allitems[i].weight  <=  w){  if  (allitems[i].profit  +  dynprogmatrix[i-1][w-allitems[i].weight]>  dynprogmatrix[i-1][w]){dynprogmatrix[i][w]  =  allitems[i].profit  +dynprogmatrix[i-1][w-  allitems[i].weight];}else{dynprogmatrix[i][w]  =  dynprogmatrix[i-1][w];}}else{dynprogmatrix[i][w]  =  dynprogmatrix[i-1][w];}}//  now  place  a  barrier  to  sync  up  the  threadstry  {barrier.await();  }  catch  (interruptedexception  ex)  {  ex.printstacktrace();return;}  catch  (brokenbarrierexception  ex)  {  ex.printstacktrace();  return;}}}  ,i  am  write  a  multithread  applic  in  java  in  order  to  improv  perform  over  the  sequenti  version  it  is  a  parallel  version  of  the  dynam  program  solut  to  the  knapsack  problem  i  have  an  intel  core  duo  with  both  ubuntu  and  window  profession  on  differ  partit  i  am  run  in  ubuntumi  problem  is  that  the  parallel  version  actual  take  longer  than  the  sequenti  version  i  am  think  this  may  be  becaus  the  thread  are  all  be  map  to  the  same  kernel  thread  or  that  they  are  be  alloc  to  the  same  core  is  there  a  way  i  could  ensur  that  each  java  thread  map  to  a  separ  core  i  have  read  other  post  about  this  problem  but  noth  seem  to  helpher  is  the  end  of  main  and  all  of  run  for  the  knapsackthread  class  which  extend  thread  notic  that  they  way  i  use  slice  and  extra  to  calcul  mylowbound  and  myhibound  ensur  that  each  thread  will  not  overlap  in  domain  of  the  dynprogmatrix  therefor  there  will  be  no  race  condit  i  have  written  anoth  version  of  the  knapsack  that  use  brute  forc  this  version  has  veri  littl  synchron  becaus  i  onli  need  to  updat  a  bestsofar  variabl  at  the  end  of  a  singl  thread  execut  therefor  each  thread  pretti  much  should  execut  complet  in  parallel  except  for  that  small  critic  section  at  the  end  i  ran  this  versus  the  sequenti  brute  forc  and  still  it  take  longer  i  dont  see  ani  other  explan  than  that  my  thread  are  be  run  sequenti  either  becaus  they  are  be  map  to  the  same  core  or  to  the  same  nativ  thread  doe  anybodi  have  ani  insight  ,  intdatatyp  explicittypecast  javalangmathfloor  actualmethodparamet  doubledatatyp  instancefieldinvoc  arrayel  divideexpress  arraylength  simpleassignmentexpress  modulusexpress  objectcreationstat  constructorcal  forstat  lessexpress  postincrementexpress  objectmethodinvoc  trycatchstat       