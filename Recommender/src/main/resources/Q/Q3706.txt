 question  ,  "import  java.util.concurrent.threadlocalrandom;class  fork  {public  static  final  char  fork  =  '|';public  static  final  char  no_fork  =  '  ';int  id;public  fork(final  int  id)  {this.id  =  id;}}class  philosopher  extends  thread  {public  static  final  char  phil_thinking  =  '-';public  static  final  char  phil_left_fork  =  '=';public  static  final  char  phil_eating  =  'o';private  final  int  id;public  philosopher(final  int  id)  {this.id  =  id;}@overridepublic  void  run()  {final  int  tableoffset  =  4  *  id;final  object  leftlock  =  s5philosophers.listoflocks[id];final  object  rightlock  =  s5philosophers.listoflocks[(id  +  1)%  s5philosophers.num_philosophers];final  int  table__farl  =  tableoffset  +  0;final  int  table__left  =  tableoffset  +  1;final  int  table_philo  =  tableoffset  +  2;final  int  table_right  =  tableoffset  +  3;final  int  table__farr  =  (tableoffset  +  4)%  (4  *  s5philosophers.num_philosophers);while  (!isinterrupted())  {try  {thread.sleep(s5philosophers.unit_of_time*  (threadlocalrandom.current().nextlong(6)));}  catch  (final  interruptedexception  e)  {break;}//  try  to  get  the  chopstick  on  the  leftsynchronized  (leftlock)  {synchronized  (s5philosophers.class)  {s5philosophers.dinertable[table__farl]  =  fork.no_fork;s5philosophers.dinertable[table__left]  =  fork.fork;s5philosophers.dinertable[table_philo]  =  phil_left_fork;}try  {sleep(s5philosophers.unit_of_time  *  1);}  catch  (final  interruptedexception  e)  {break;}//  try  to  get  the  chopstick  on  the  rightsynchronized  (rightlock)  {synchronized  (s5philosophers.class)  {s5philosophers.dinertable[table_philo]  =  phil_eating;s5philosophers.dinertable[table_right]  =  fork.fork;s5philosophers.dinertable[table__farr]  =  fork.no_fork;//notify();}try  {sleep(s5philosophers.unit_of_time  *  1);}  catch  (final  interruptedexception  e)  {break;}//  release  forksynchronized  (s5philosophers.class)  {s5philosophers.dinertable[table__farl]  =  fork.fork;s5philosophers.dinertable[table__left]  =  fork.no_fork;s5philosophers.dinertable[table_philo]  =  phil_thinking;s5philosophers.dinertable[table_right]  =  fork.no_fork;s5philosophers.dinertable[table__farr]  =  fork.fork;//notify();}}}}}}public  class  s5philosophers  {public  static  final  int  num_philosophers  =  5;public  static  final  int  unit_of_time  =  50;public  static  final  fork[]  listoflocks  =  new  fork[num_philosophers];public  static  char[]  dinertable  =  null;static  {for  (int  i  =  0;  i  <  num_philosophers;  i++)listoflocks[i]  =  new  fork(i);}public  static  void  main(final  string[]  a)  {final  char[]  lockeddiner  =  new  char[4  *  num_philosophers];for  (int  i  =  0;  i  <  num_philosophers;  i++)  {lockeddiner[4  *  i  +  0]  =  fork.no_fork;lockeddiner[4  *  i  +  1]  =  fork.fork;lockeddiner[4  *  i  +  2]  =  philosopher.phil_left_fork;lockeddiner[4  *  i  +  3]  =  fork.no_fork;}final  string  lockedstring  =  new  string(lockeddiner);//  safe  publication  of  the  initial  representationsynchronized  (s5philosophers.class)  {dinertable  =  new  char[4  *  num_philosophers];for  (int  i  =  0;  i  <  num_philosophers;  i++)  {dinertable[4  *  i  +  0]  =  fork.fork;dinertable[4  *  i  +  1]  =  fork.no_fork;dinertable[4  *  i  +  2]  =  philosopher.phil_thinking;dinertable[4  *  i  +  3]  =  fork.no_fork;}}for  (int  i  =  0;  i  <  num_philosophers;  i++)  {final  thread  t  =  new  philosopher(i);//  uses  this  solution  to  allow  terminating  the  application  even  if//  there  is  a  deadlockt.setdaemon(true);t.start();}system.out.println(""the  diner  table:"");long  step  =  0;while  (true)  {step++;string  curtablestring  =  null;synchronized  (s5philosophers.class)  {curtablestring  =  new  string(dinertable);}system.out.println(curtablestring  +  ""  ""  +  step);if  (lockedstring.equals(curtablestring))break;try  {thread.sleep(unit_of_time);}  catch  (final  interruptedexception  e)  {system.out.println(""interrupted."");}}system.out.println(""the  diner  is  locked."");}}"  ,here  my  implement  of  the  philosoph  dinner  concurr  problem  philosoph  where  each  one  extend  thread  the  problem  is  everytim  the  program  finish  insid  a  deadlock  i  tri  differ  solut  but  no  one  fix  the  problem  mayb  someon  can  give  me  an  help  this  is  my  program  ,    implementsspecif  methodimplement  privatefieldspecifi  finalfieldspecifi  instancefield  simplevari  formalmethodparamet  constructordefinit  publicconstructorspecifi  instancefieldinvoc  thisrefer  simpleassignmentexpress  objectmethodinvoc     intdatatyp  simplevari  