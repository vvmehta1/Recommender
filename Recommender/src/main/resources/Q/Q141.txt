 question  ,  "status:;  scenario:;  mymethods.class;  static;  mymethods.somemethod();;  non-static;  instantiate;  mymethods  mm  =  mymethods();  mm.somemethod();;  problems:;  jdbc  static  methods;  instanticated;  request:;  code:;  /**  the  classes  that  implement  a  concrete  strategy  should  implement  this.*  the  context  class  uses  this  to  call  the  concrete  strategy.  */interface  strategy  {int  execute(int  a'  '  int  b);  }/**  implements  the  algorithm  using  the  strategy  interface  */class  add  implements  strategy  {public  int  execute(int  a'  '  int  b)  {system.out.println(""called  add's  execute()"");return  a  +  b;//  do  an  addition  with  a  and  b}}class  subtract  implements  strategy  {public  int  execute(int  a'  '  int  b)  {system.out.println(""called  subtract's  execute()"");return  a  -  b;//  do  a  subtraction  with  a  and  b}}class  multiply  implements  strategy  {public  int  execute(int  a'  '  int  b)  {system.out.println(""called  multiply's  execute()"");return  a  *  b;  //  do  a  multiplication  with  a  and  b}}//  configured  with  a  concretestrategy  object  and  maintains//  a  reference  to  a  strategy  object  class  context  {private  strategy  strategy;public  context(strategy  strategy)  {this.strategy  =  strategy;}public  int  executestrategy(int  a'  '  int  b)  {return  this.strategy.execute(a'  '  b);}}/**  tests  the  pattern  */class  strategyexample  {public  static  void  main(string[]  args)  {context  context;//  three  contexts  following  different  strategiescontext  =  new  context(new  add());int  resulta  =  context.executestrategy(3'  '4);context  =  new  context(new  subtract());int  resultb  =  context.executestrategy(3'  '4);context  =  new  context(new  multiply());int  resultc  =  context.executestrategy(3'  '4);system.out.println(""result  a  :  ""  +  resulta  );system.out.println(""result  b  :  ""  +  resultb  );system.out.println(""result  c  :  ""  +  resultc  );}}"  ,  answer  of  fendi  and  glen  best  are  and  honor  by  me  but  sinc  one  can  be  accept  and  bounti  be  given  i  choos  fendi  answer  if  i  have  that  has  in  rare  with  minor  paramet  chang  which  is  obvious  and  concurr  thread  which  approach  to  go  for  the  code  that  has  to  be  reus  can  be  ani  sane  thing  with  appropri  care  of  static  and  nonstat  context  in  mind  and  method  make  techniqu  it  can  be  an  algorithm  a  db  method  doingconnectoperateclos  anyth  ,  implementsspecif  methodimplement  formalmethodparamet  intdatatyp  simplevari  returnstat  objectmethodinvoc  actualmethodparamet  instancefieldinvoc  thisrefer  staticmethodspecifi  simpleassignmentexpress  objectcreationstat  constructorcal  stringliter  stringdatatyp  stringaddit  javalangsystemoutprintln    simpleassignmentexpress     