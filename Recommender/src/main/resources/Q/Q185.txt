 question  ,  public  example(string  s'  '  int  i'  '  @foo  bar  bar)  {/*  ...  */};  @foo;  @foo;  import  java.lang.annotation.annotation;import  java.lang.reflect.method;class  util  {private  method  getcurrentmethod()  {try  {final  stacktraceelement[]  stes  =  thread.currentthread().getstacktrace();final  stacktraceelement  ste  =  stes[stes.length  -  1];final  string  methodname  =  ste.getmethodname();final  string  classname  =  ste.getclassname();  final  class<?>  currentclass  =  class.forname(classname);return  currentclass.getdeclaredmethod(methodname);}  catch  (exception  cause)  {throw  new  unsupportedoperationexception(cause);}}private  object  getargumentfrommethodwithannotation(method  method'  '  class<?>  annotation)  {final  annotation[][]  paramannotations  =  method.getparameterannotations();for  (annotation[]  annotations  :  paramannotations)  {for  (annotation  an  :  annotations)  {/*  ...  */}}}};  getparameterannotations  ,consid  this  code  i  want  to  check  if  the  method  has  an  annot  and  get  the  argument  or  throw  an  except  if  no  annot  is  found  my  current  approach  is  to  first  get  the  current  method  and  then  iter  through  the  paramet  annot  is  this  the  right  approach  or  is  there  a  better  onehow  would  the  code  insid  the  forach  loop  look  like  im  not  sure  if  i  have  understood  the  what  actual  return  ,  intdatatyp  simplevari  importstat  privatemethodspecifi  trycatchstat  constant  constantinitializationstat  arraydatatyp  simpleassignmentexpress  objectmethodinvoc  arrayel  arraylength  subtractexpress  stringvari  stringdatatyp  actualmethodparamet  returnstat  throwstat  objectcreationstat  constructorcal  formalmethodparamet    objectmethodinvoc     