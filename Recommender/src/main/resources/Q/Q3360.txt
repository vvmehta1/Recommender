 question  ,  "public  class  simpledateformatthreadtest{@testpublic  void  test_simpledateformat_multithreaded()  throws  parseexception{date  adate  =  (new  simpledateformat(""dd/mm/yyyy"").parse(""31/12/1999""));dataformatter  callable  =  new  dataformatter(adate);executorservice  executor  =  executors.newfixedthreadpool(1000);collection<dataformatter>  callables  =  collections.ncopies(1000'  '  callable);try{list<future<string>>  futures  =  executor.invokeall(callables);for  (future  f  :  futures){try{assertequals(""31/12/1999""'  '  (string)  f.get());}catch  (executionexception  e){e.printstacktrace();}}}catch  (interruptedexception  e){e.printstacktrace();}}}class  dataformatter  implements  callable<string>{static  simpledateformat  sdf  =  new  simpledateformat(""dd/mm/yyyy"");date  date;dataformatter(date  date){this.date  =  date;}@overridepublic  string  call()  throws  runtimeexception{try{return  sdf.format(date);}catch  (runtimeexception  e){e.printstacktrace();return  ""exception"";}}}"  ,i  want  to  show  to  a  colleagu  that  simpledateformat  is  threadsaf  through  a  simpl  junit  test  the  follow  class  fail  to  make  my  point  reus  simpledateformat  in  a  multithread  environ  and  i  dont  understand  whi  can  you  spot  what  is  prevent  my  use  of  sdf  from  throw  a  runtim  except  ,  classdefinit  implementsspecif  methodimplement  staticfieldspecifi  classfield  simplevari  instancefield  formalmethodparamet  constructordefinit  instancefieldinvoc  thisrefer  simpleassignmentexpress  methoddefinit    simpleassignmentexpress     objectvari  simplevari  