 question  ,  public  final  class  singletonouter  {private  static  singletonouter  ourinstance  =  new  singletonouter();public  static  singletonouter  getinstance()  {return  ourinstance;}private  final  someotherclass  afield;private  singletonouter()  {afield=new  someotherclass();  thread=new  innerthread();thread.start();}private  boolean  pleasestop;private  synchronized  boolean  askedstop(){return  pleasestop;}public  synchronized  void  stop(){pleasestop=true;}private  final  innerthread  thread  ;private  class  innerthread  extends  thread{@override  public  void  run()  {//do  stuff  with  afield  until  askedstop()}}};  public  final  class  singletonouter  {private  static  singletonouter  ourinstancepublic  static  singletonouter  getinstance()  {if  (ourinstance==null){ourinstance=  =  new  singletonouter();ourinstance.thread.start();}return  ourinstance;}private  final  someotherclass  afield;private  singletonouter()  {afield=new  someotherclass();  thread=new  innerthread();}...  ,im  use  to  run  on  my  code  in  order  to  find  bug  or  bad  practicetoday  it  complain  on  the  fact  that  im  start  a  thread  in  a  class  constructor  is  realli  a  bad  thing  to  do  could  you  explain  me  whi  it  is  at  least  safe  if  my  class  is  final  the  thread  is  implement  as  an  inner  class  and  it  onli  use  field  of  the  main  class  alreadi  initi  when  it  is  start  i  final  move  the  start  of  thread  to  the  getinst  method  to  avoid  the  possibl  of  introduc  futur  bug  ,  classdefinit  publicclassspecifi  finalclassspecifi  privatefieldspecifi  staticfieldspecifi  classfield  instancefieldinitializationstat  simpleassignmentexpress  objectcreationstat  constructorcal  methoddefinit  publicmethodspecifi  staticmethodspecifi  returnstat  finalfieldspecifi  instancefield  simplevari  constructordefinit  privateconstructorspecifi  objectmethodinvoc  booleandatatyp  privatemethodspecifi  synchronizedmethodspecifi  voiddatatyp  true  privateclassspecifi  extendsspecif       