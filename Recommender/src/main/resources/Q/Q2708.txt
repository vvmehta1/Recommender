 question  ,  time  (95  percentile);  attributes  =  declient.getdeattributes(columnslist);;  20  threads;  running  for  15  minutes;  37ms;  executorservice  service  =  executors.newfixedthreadpool(20);;  15  minutes;  executorservice  service  =  executors.newsinglethreadexecutor();;  executorservice  service  =  executors.newfixedthreadpool(20);;  7ms;  newfixedthreadpool(20);  newsinglethreadexecutor  vs  newfixedthreadpool(20);  15  minutes;  public  static  void  main(string[]  args)  {try  {//  create  thread  pool  with  given  size//executorservice  service  =  executors.newfixedthreadpool(20);executorservice  service  =  executors.newsinglethreadexecutor();long  starttime  =  system.currenttimemillis();long  endtime  =  starttime  +  (15  *  60  *  1000);//running  for  15  minutesfor  (int  i  =  0;  i  <  threads;  i++)  {service.submit(new  servicetask(endtime'  '  servicelist));}//  wait  for  terminationservice.shutdown();service.awaittermination(long.max_value'  '  timeunit.days);}  catch  (interruptedexception  e)  {}  catch  (exception  e)  {}};  class  servicetask  implements  runnable  {private  static  final  logger  log  =  logger.getlogger(servicetask.class.getname());private  static  random  random  =  new  securerandom();public  static  volatile  atomicinteger  countsize  =  new  atomicinteger();private  final  long  endtime;private  final  linkedhashmap<string'  '  serviceinfo>  tablelists;public  static  concurrenthashmap<long'  '  long>  selecthistogram  =  new  concurrenthashmap<long'  '  long>();public  servicetask(long  endtime'  '  linkedhashmap<string'  '  serviceinfo>  tablelist)  {this.endtime  =  endtime;this.tablelists  =  tablelist;}@overridepublic  void  run()  {try  {while  (system.currenttimemillis()  <=  endtime)  {double  randomnumber  =  random.nextdouble()  *  100.0;serviceinfo  service  =  selectrandomservice(randomnumber);final  string  id  =  generaterandomid(random);final  list<string>  columnslist  =  getcolumns(service.getcolumns());list<deattribute<?>>  attributes  =  null;dekey  bk  =  new  dekey(service.getkeys()'  '  id);list<dekey>  list  =  new  arraylist<dekey>();list.add(bk);client  declient  =  new  client(list);final  long  start  =  system.nanotime();attributes  =  declient.getdeattributes(columnslist);final  long  end  =  system.nanotime()  -  start;final  long  key  =  end  /  1000000l;boolean  done  =  false;while(!done)  {long  oldvalue  =  selecthistogram.putifabsent(key'  '  1l);if(oldvalue  !=  null)  {done  =  selecthistogram.replace(key'  '  oldvalue'  '  oldvalue  +  1);}  else  {done  =  true;}}countsize.getandadd(attributes.size());handledeattribute(attributes);if  (beservicelnp.sleeptime  >  0l)  {thread.sleep(beservicelnp.sleeptime);}}}  catch  (exception  e)  {}}};  processor  :  0vendor_id  :  genuineintelcpu  family:  6model  :  45model  name:  intel(r)  xeon(r)  cpu  e5-2670  0  @  2.60ghzstepping:  7cpu  mhz  :  2599.999cache  size:  20480  kbfpu  :  yesfpu_exception  :  yescpuid  level  :  13wp:  yesflags  :  fpu  vme  de  pse  tsc  msr  pae  mce  cx8  apic  sep  mtrr  pge  mca  cmov  pat  pse36  clflush  dts  acpi  mmx  fxsr  sse  sse2  ss  syscall  nx  rdtscp  lm  constant_tsc  arch_perfmon  pebs  bts  rep_good  xtopology  tsc_reliable  nonstop_tsc  aperfmperf  pni  pclmulqdq  ssse3  cx16  sse4_1  sse4_2  popcnt  aes  hypervisor  lahf_lm  arat  pln  ptsbogomips:  5199.99clflush  size:  64cache_alignment  :  64address  sizes  :  40  bits  physical'  '  48  bits  virtualpower  management:processor  :  1vendor_id  :  genuineintelcpu  family:  6model  :  45model  name:  intel(r)  xeon(r)  cpu  e5-2670  0  @  2.60ghzstepping:  7cpu  mhz  :  2599.999cache  size:  20480  kbfpu  :  yesfpu_exception  :  yescpuid  level  :  13wp:  yesflags  :  fpu  vme  de  pse  tsc  msr  pae  mce  cx8  apic  sep  mtrr  pge  mca  cmov  pat  pse36  clflush  dts  acpi  mmx  fxsr  sse  sse2  ss  syscall  nx  rdtscp  lm  constant_tsc  arch_perfmon  pebs  bts  rep_good  xtopology  tsc_reliable  nonstop_tsc  aperfmperf  pni  pclmulqdq  ssse3  cx16  sse4_1  sse4_2  popcnt  aes  hypervisor  lahf_lm  arat  pln  ptsbogomips:  5199.99clflush  size:  64cache_alignment  :  64address  sizes  :  40  bits  physical'  '  48  bits  virtualpower  management:  ,i  am  tri  to  benchmark  our  client  code  so  i  decid  i  will  write  a  multithread  program  to  do  the  benchmark  of  my  client  code  i  am  tri  to  measur  how  much  below  method  will  take  so  below  is  the  multithread  code  i  wrote  to  do  the  benchmark  on  the  abov  method  i  am  see  lot  of  variat  in  my  two  scenario  first  with  multithread  code  by  use  and  i  get  percentil  as  and  i  am  use  but  if  i  am  run  my  same  program  for  use  instead  of  i  get  percentil  as  which  is  way  less  than  the  abov  number  when  i  am  run  my  code  with  and  by  both  way  i  am  run  my  program  for  below  is  my  code  below  is  the  class  that  implement  runnabl  interfac  my  machin  config  spec  i  am  run  my  program  from  linux  machin  ,  implementsspecif  methodimplement  privatefieldspecifi  staticfieldspecifi  finalfieldspecifi  classfield  classconstantinitializationstat  simpleassignmentexpress  objectmethodinvoc  actualmethodparamet  instancefieldinitializationstat  objectcreationstat  constructorcal  publicfieldspecifi  volatilefieldspecifi  instancefield  longdatatyp  simplevari  instancefieldinvoc  thisrefer  greaterexpress  constant  constantinitializationstat  subtractexpress  divideexpress  booleandatatyp  fals  whilestat  notexpress  javalanglong  ifstat  notequalexpress  null  javalangstringreplac  true  objectvari  explicittypecast 