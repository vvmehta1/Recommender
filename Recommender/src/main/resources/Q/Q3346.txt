 question  ,  "class  shared{string  a;  integer  b;//constructor'  '  getters  and  setters....};  //readersshared.geta();shared.getb();;  //writershared.seta(""state"");shared.setb(1);;  volatile;  volatilestring  a;  volatile  integer  b;;  atomicreference<shared>  shared  =  ....;  shared  prev  =  shared.get();  shared  newvalue  =  new  shared(""state""'  '1);while  (!shared.compareandset(prev'  '  newvalue))  ;  concurrenthashmap<id'  'shared>;  concurrenthashmap<id'  'atomicreference<shared>>"  ,i  have  to  synchron  access  between  thread  to  a  share  object  whose  state  consist  ofsever  field  say  i  have  possibl  mani  thread  read  this  object  do  and  onli  one  thread  that  will  write  at  a  certain  point  now  my  question  is  how  to  ensur  that  read  thread  wont  find  the  share  object  in  an  inconsist  state  i  read  mani  answer  say  that  for  consist  between  thread  is  the  solutionbut  im  not  sure  how  it  work  on  multipl  field  eg  is  that  enough  anoth  solut  would  be  to  make  the  share  object  immut  and  use  atomicrefer  egand  then  the  writer  will  just  swap  the  refer  is  that  approach  correct  thanksin  my  set  the  share  object  are  retriev  from  a  so  the  comment  agre  that  the  way  to  go  is  either  use  the  immut  approach  or  via  synchron  the  updat  on  share  all  togeth  howev  for  complet  would  be  nice  to  know  whether  the  solut  abov  with  the  is  viabl  or  wrong  or  just  superflu  anyon  can  explain  thank  ,  simpleassignmentexpress  whilestat  notexpress  objectmethodinvoc  actualmethodparamet  lessexpress          stringvari  stringdatatyp  simplevari  instancefieldinvoc  thisrefer  simpleassignmentexpress  