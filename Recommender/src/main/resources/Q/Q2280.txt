 question  ,  "string[][]  map  =  new  string[][]  {  new  string[]  {  ""1""'  '""1""'  '""1""'  '""0""'  '""0""'  '""0""'  '""1""'  '""1""'  '""1""'  '""1""  }'  '  new  string[]  {  ""s""'  '""0""'  '""0""'  '""0""'  '""1""'  '""1""'  '""0""'  '""0""'  '""0""'  '""1""  }'  '  new  string[]  {  ""1""'  '""1""'  '""0""'  '""0""'  '""1""'  '""0""'  '""0""'  '""1""'  '""0""'  '""1""  }'  '  new  string[]  {  ""1""'  '""1""'  '""1""'  '""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""1""  }'  '  new  string[]  {  ""1""'  '""0""'  '""1""'  '""1""'  '""1""'  '""0""'  '""1""'  '""1""'  '""0""'  '""1""  }'  '  new  string[]  {  ""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""1""  }'  '  new  string[]  {  ""0""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""'  '""1""  }'  '  new  string[]  {  ""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""0""'  '""e""  }'  '  };;  //  pre-condition:  two  integers  indicating  the  row  and  col  number  to  start  from'  '//  a  2d  array  of  string  objects  representing  the  map  of  the  maze'  '//  a  2d  array  of  booleans  mapping  out  the  visited  cells  in  the  maze//  a  string  array  containing  the  map  of  the  maze.//  an  empty  stack  object//  post-conditon:  the  distance  of  the  shortest  path  from  the  current  cell(start)//  to  the  end  of  the  mazepublic  static  int  shortestpath(int  row'  'int  col'  'boolean[][]  visited'  'string[][]  map'  'stack<pair>  path){if(row  <  0  ||  row  >=  map.length  ||  col  <  0  ||  col  >=  map[0].length)return  -1;else  if(visited[row][col]  ==  true)return  -1;else  if(map[row][col].equals(""e""))return  0;else{//  mark  the  current  cell  as  visitedvisited[row][col]  =  true;//  there  is  a  wallif(map[row][col].equals(""1""))return  -1;else{int[]  pathdist  =  new  int[4];//  start  finding  the  path  from  the  leftint  left=  1  +  shortestpath(row'  'col-1'  'visited'  'map'  'path);//  start  searching  from  the  rightint  right  =  1  +  shortestpath(row'  'col+1'  'visited'  'map'  'path);//  start  searching  from  the  bottomint  down=  1  +  shortestpath(row+1'  'col'  'visited'  'map'  'path);//  start  searching  from  the  topint  up=  1  +  shortestpath(row-1'  'col'  'visited'  'map'  'path);visited[row][col]  =  false;pathdist[0]  =  left;pathdist[1]  =  right;pathdist[2]  =  down;pathdist[3]  =  up;arrays.sort(pathdist);for(integer  i  :  pathdist)if(i  >  0)  return  i;return  -1;}}}"  ,i  have  success  done  up  a  shortest  path  algorithm  for  a  maze  see  code  below  howev  i  want  to  store  the  coordin  of  the  shortest  path  into  the  stack  paramet  that  is  pass  into  my  function  could  someon  pleas  advis  me  on  how  i  could  achiev  thisher  is  the  maze  that  i  am  work  on  legend  wall  valid  path  s  start  e  end  my  algorithm  ,  stringliter  stringdatatyp  simpleassignmentexpress  intdatatyp  simplevari  multidimensionalarraydatatyp  booleandatatyp  arrayel  fals  objectmethodinvoc  actualmethodparamet  javalanginteg  foreachstat  ifstat  greaterexpress  returnstat    simpleassignmentexpress  