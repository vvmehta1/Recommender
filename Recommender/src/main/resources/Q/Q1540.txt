 question  ,  "run(parent  p);  child;  parent;  child;  run(parent  p);  parent;  classcastexception;  /*  file  :  example.i  */%module(directors=""1"")  example%{#include  ""example.h""%}%include  ""std_string.i""/*  turn  on  director  wrapping  callback  */%feature(""director"")  callback;%include  ""example.h""/*  file  :  example.h  */#include  <string>#include  <cstdio>#include  <iostream>#include  <typeinfo>class  parent  {public:virtual  const  char*  getname()  {return  typeid(*this).name();}};class  child  :  virtual  public  parent  {};class  callback  {public:virtual  ~callback()  {  std::cout  <<  ""callback::~callback()""  <<  std::  endl;  }virtual  void  run(parent&  p)  {  std::cout  <<  ""callback::run(""  <<  p.getname()  <<  "")""  <<  std::endl;  }};class  caller  {private:callback  *_callback;public:caller():  _callback(0)  {}~caller()  {  delcallback();  }void  delcallback()  {  delete  _callback;  _callback  =  0;  }void  setcallback(callback  *cb)  {  delcallback();  _callback  =  cb;  }void  call()  {parent  *p  =  new  child();if  (_callback)  _callback->run(*p);delete  p;}};/*  file:  runme.java  */public  class  runme{static  {try  {system.loadlibrary(""example"");}  catch  (unsatisfiedlinkerror  e)  {system.err.println(""native  code  library  failed  to  load.  see  the  chapter  on  dynamic  linking  problems  in  the  swig  java  documentation  for  help.""  +  e);system.exit(1);}}public  static  void  main(string[]  args){system.out.println(""adding  and  calling  a  normal  c++  callback"");system.out.println(""----------------------------------------"");callercaller  =  new  caller();callbackcallback  =  new  callback();caller.setcallback(callback);caller.call();caller.delcallback();callback  =  new  javacallback();system.out.println();system.out.println(""adding  and  calling  a  java  callback"");system.out.println(""------------------------------------"");caller.setcallback(callback);caller.call();caller.delcallback();//  test  that  a  double  delete  does  not  occur  as  the  object  has  already  been  deleted  from  the  c++  layer.//  note  that  the  garbage  collector  can  also  call  the  delete()  method  via  the  finalizer  (callback.finalize())//  at  any  point  after  here.callback.delete();system.out.println();system.out.println(""java  exit"");}}class  javacallback  extends  callback{public  javacallback(){super();}public  void  run(parent  p){system.out.println(""javacallback.run(""+p.getclass().getsimplename()+"")"");super.run(p);}}#  file:  makefiletop=  ../..swig  =  $(top)/../preinst-swigcxxsrcs=  example.cxxtarget  =  exampleinterface=  example.iswigopt=all::  javajava::$(make)  -f  $(top)/makefile  cxxsrcs='$(cxxsrcs)'  swig='$(swig)'  swigopt='$(swigopt)'  target='$(target)'  interface='$(interface)'  java_cppjavac  *.javaclean::$(make)  -f  $(top)/makefile  java_cleancheck:  all"  ,whi  is  my  c  swig  object  lose  it  type  when  pass  to  a  java  callback  function  ive  taken  the  swig  java  exampl  for  do  callback  and  ad  an  object  to  be  pass  to  the  callback  the  callback  work  as  expect  but  when  i  pass  a  object  the  java  seem  to  lose  it  type  and  think  it  of  type  when  it  should  be  this  is  base  on  the  ubuntu  w  swig  on  the  off  chanc  the  latest  swig  made  a  differ  i  also  test  which  had  no  effect  as  you  can  see  in  the  output  the  object  is  realli  of  type  child  but  it  java  class  name  is  parent  which  is  wrong  if  you  look  in  the  java  callback  you  can  see  where  im  fetch  the  java  class  and  java  realli  doe  think  this  object  is  of  type  tri  to  cast  this  to  child  will  throw  as  expect  this  might  be  a  bug  in  swig  but  im  hope  that  this  is  my  be  stupid  with  c  typescast  ani  thought  would  be  great  appreci  , 