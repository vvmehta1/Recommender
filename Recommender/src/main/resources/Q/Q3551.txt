 question  ,  "sleep();  jmap;  application.cfc;  <!---  kick  off  a  new  thread  and  run  through  the  queue  ---><cfthread  action=""run""  name=""mythread""><cfloop  condition=""application.threadprocessing  eq  true""><cfif  application.myqueue.hasnext()><!---  get  next  item  ---><cfset  tmpitem  =  application.myqueue.next()  /><!---  ask  item  to  process  itself  ---><cfset  tmpitem.process()  /><!---  problem:  these  'tmpitem'  objects  are  never  cleaned  up  by  the  garbage  collector!  --->  <!---  then  we  sleep  for  an  interval  -  this  is  to  stop  us  hogging  server  resources  ---><cfset  sleep(2000)  /><cfelse><!---  nothing  in  the  queue'  '  so  sleep  for  a  while...  ---><cfset  sleep(10000)  /></cfif></cfloop>  </cfthread>"  ,i  have  a  particular  thread  that  i  kick  off  when  by  cf  applic  start  it  manag  a  queue  and  take  item  from  the  queue  to  process  them  if  there  are  no  item  to  take  from  the  queue  it  will  this  thread  could  live  for  week  process  and  sleep  etcth  problem  i  am  have  is  that  the  item  i  am  take  from  the  queue  are  be  retain  in  the  heap  look  like  in  the  old  generat  long  after  i  am  done  with  thema  full  garbag  collect  is  done  by  the  jvm  about  everi  hour  i  can  tell  this  from  jconsol  and  even  when  that  run  the  item  i  have  process  are  still  retain  in  the  heap  i  can  tell  this  becaus  i  do  a  heap  dump  and  analys  it  use  the  memori  analysi  tool  eclips  pluginso  here  is  my  code  this  is  execut  in  can  anyon  tell  me  if  i  am  use  the  incorrect  scope  or  someth  is  there  a  way  to  forc  cleanup  of  my  temporari  object  i  presum  that  call  an  explicit  garbag  collect  would  not  work  as  it  not  be  clean  up  anywaythi  onli  appear  to  becom  a  problem  when  we  move  from  cf  to  cf  ani  and  all  help  appreci  i  realli  would  like  to  keep  this  thread  approach  and  not  run  it  as  a  schedul  task  or  somethingthank  ciaran  ,          