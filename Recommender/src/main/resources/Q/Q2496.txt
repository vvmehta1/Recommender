 question  ,  public  class  unsafelazyinitialization  {private  static  resource  resource;public  static  resource  getinstance()  {if  (resource  ==  null)resource  =  new  resource();//  unsafe  publicationreturn  resource;}};  unsafelazyinitialization;  resource;  resource;  resource;  resource;  if;  return;  resource;  if;  unsafelazyinitialization.getinstance();  resource  ,this  question  has  generat  much  more  heat  than  i  woul  dhave  imagin  an  import  conclus  i  drew  from  public  and  privat  discuss  with  member  of  the  concurr  interest  mail  list  ie  peopl  who  actual  work  on  implement  those  thing  that  what  john  vint  has  provid  in  his  answer  the  code  below  java  concurr  in  practic  list  is  not  thread  safe  for  obvious  reason  howev  a  few  page  later  in  section  they  state  i  dont  understand  that  statement  note  i  expect  an  argument  answer  rather  than  pure  yes  or  no  statement  to  better  understand  my  point  about  reorder  by  jeremi  manson  who  is  one  of  the  author  of  the  chapter  of  the  jls  on  concurr  explain  how  string  hashcod  is  safe  publish  via  a  benign  data  race  and  how  remov  the  use  of  a  local  variabl  can  lead  to  hashcod  incorrect  return  due  to  a  possibl  reorder  veri  similar  to  what  i  describ  abov  ,  classdefinit  publicclassspecifi  privatefieldspecifi  staticfieldspecifi  classfield  simplevari  methoddefinit  publicmethodspecifi  staticmethodspecifi       staticmethodspecifi        simpleassignmentexpress        classdefinit  publicclassspecifi  privatefieldspecifi  staticfieldspecifi  classfield  simplevari  methoddefinit  publicmethodspecifi  staticmethodspecifi     constant  constantinitializationstat  simpleassignmentexpress  objectcreationstat  constructorcal  objectvari  simplevari     simpleassignmentexpress  