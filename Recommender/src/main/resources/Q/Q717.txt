 question  ,  for  linkedlist*  get  is  o(n)*  add  is  o(1)*  remove  is  o(n)*  iterator.remove  is  o(1)for  arraylist*  get  is  o(1)*  add  is  o(1)  amortized'  '  but  o(n)  worst-case  since  the  array  must  be  resized  and  copied*  remove  is  o(n);  long  nano1  =  system.nanotime();list<integer>  arr  =  new  arraylist();for(int  i=0;i<5000000;++i){arr.add(i);}system.out.println(  (system.nanotime()  -  nano1)  );for(int  j:  arr){;}system.out.println(  (system.nanotime()  -  nano1)  );long  nano2  =  system.nanotime();list<integer>  arrl  =  new  linkedlist();for(int  i=0;i<5000000;++i){arrl.add(i);}system.out.println(  (system.nanotime()  -  nano2)  );for(int  j:arrl){;}system.out.println(  (system.nanotime()  -  nano2)  );  ,i  was  follow  a  on  this  that  say  so  by  look  at  this  i  conclud  that  if  ive  to  do  just  sequenti  insert  in  my  collect  for  say  element  linkedlist  will  outclass  arraylist  and  if  ive  to  just  fetch  the  element  from  collect  by  iter  ie  not  grab  the  element  in  middl  still  linkedlist  will  outclass  arraylistnow  to  verifi  my  abov  two  statement  i  wrote  below  sampl  program  but  im  surpris  that  my  abov  statement  were  proven  wrong  arraylist  outclass  linkedlist  in  both  the  case  it  took  less  time  than  linkedlist  for  ad  as  well  as  fetch  them  from  collect  is  there  anyth  im  do  wrong  or  the  initi  statement  about  linkedlist  and  arraylist  doe  not  hold  true  for  collect  of  size  i  mention  size  becaus  if  i  reduc  the  number  of  element  to  linkedlist  perform  better  and  initi  statement  hold  true  ,    stringliter  stringdatatyp  stringaddit  simpleassignmentexpress  lessexpress  greaterexpress  notequalexpress  ifelsestat  nestedforloop  rightshiftsignedexpress  intdatatyp  forstat  lessequalexpress  postincrementexpress  postdecrementexpress  returnstat        actualmethodparamet  simpleassignmentexpress  arrayel  greaterexpress  orexpress  objectvari  simplevari           