 question  ,  t1;  t2;  t3  ,im  build  a  poc  leverag  zeromq  nton  pubsub  model  from  our  app  server  when  a  http  request  is  servic  if  the  thread  pull  data  from  the  databas  it  updat  a  local  memcach  instanc  with  that  data  to  synchron  other  memcach  instanc  in  the  app  server  cluster  the  request  thread  send  a  messag  with  the  data  use  a  zmq  publisherso  the  question  is  with  respect  to  minim  socket  createdestori  overhead  when  the  applic  has  mani  thread  that  depend  on  socket  for  send  messag  do  we  share  a  pool  of  socket  do  we  createdestroy  socket  per  thread  etc  in  this  approach  each  thread  and  manag  the  lifecycl  of  a  socket  object  publish  by  creat  it  make  the  connect  send  a  messag  and  final  close  the  socket  base  on  it  certain  the  safest  approach  but  we  have  concern  with  respect  to  overhead  when  socket  are  creat  connect  and  destroy  repeat  if  the  overhead  negat  impact  perform  wed  like  to  avoid  it  in  this  approach  the  parent  process  app  server  initi  a  pool  of  zmq  publish  on  startup  when  a  thread  need  a  publish  it  get  one  from  the  object  pool  send  it  messag  then  return  the  publish  to  the  pool  the  process  of  creat  connect  and  destroy  socket  is  elimin  with  respect  to  the  thread  use  the  publish  but  access  to  the  pool  is  to  avoid  ani  two  thread  use  the  same  publish  object  at  the  same  time  and  this  is  where  deadlock  and  concurr  issu  may  aris  we  have  not  profil  either  approach  becaus  want  to  do  a  litmus  on  so  test  first  with  respect  to  volum  our  applic  in  not  publish  heavi  but  there  could  be  between  thread  per  app  server  at  the  same  time  with  the  need  to  publish  a  messageso  to  reiter  with  respect  to  minim  overhead  while  emphas  perform  when  the  applic  has  mani  thread  that  depend  on  publish  for  send  messag  ,  objectvari  simplevari  simpleassignmentexpress    simpleassignmentexpress  