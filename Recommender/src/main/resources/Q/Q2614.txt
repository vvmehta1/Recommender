 question  ,  public  class  foo()  {private  static  final  hashmap<string'  '  hashmap>  shareddata;private  final  hashmap  myrefofinnerhashmap;static  {  //  time-consuming  initialization  of  shareddata  final  hashmap<string'  '  string>  innermap  =  new  hashmap<string'  '  string>;  innermap.put...  innermap.put...  ...a  shareddata.put(somekey'  '  java.util.collections.unmodifiablemap(innermap));}public  foo(string  key)  {this.myrefofinnerhashmap  =  shareddata.get(key);}public  void  dosomethinguseful()  {//  iterate  over  copyfor  (map.entry<string'  '  string>  entry  :  this.myrefofinnerhashmap.entryset())  {...}}  };  private  static  final  concurrenthashmap<string'  '  hashmap>  shareddata;;  private  static  final  concurrenthashmap<string'  '  concurrenthashmap>  shareddata;;  this.mycopyofdata  =  shareddata.get(key).clone();  ,ive  read  around  quit  a  bit  but  havent  found  a  definit  answer  i  have  a  class  that  look  like  this  and  im  wonder  if  it  is  thread  safe  to  access  shareddata  from  instanc  of  foo  as  is  shown  in  the  constructor  and  in  dosomethingus  mani  instanc  of  foo  will  be  creat  in  a  multithread  environmentmi  intent  is  that  shareddata  is  initi  in  the  static  initi  and  not  modifi  thereaft  readon  what  ive  read  is  that  immut  object  are  inher  thread  safe  but  ive  onli  seen  this  in  what  seem  to  be  the  context  of  instanc  variabl  are  immut  static  variabl  thread  safe  the  other  construct  i  found  was  a  concurrenthashmap  i  could  make  shareddata  of  type  concurrenthashmap  but  do  the  hashmap  it  contain  also  have  to  be  of  type  concurrenthashmap  basic  or  or  would  it  be  safer  yet  more  cost  to  simpli  clonetia  static  initi  has  been  edit  to  give  more  context  ,  privatefieldspecifi  finalfieldspecifi  instancefield  simplevari  postincrementexpress  objectmethodinvoc  actualmethodparamet  formalmethodparamet  instancefieldinvoc  thisrefer  simpleassignmentexpress 