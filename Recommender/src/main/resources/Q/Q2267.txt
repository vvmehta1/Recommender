 question  ,  "if(_tiles[next.x][next.y].getcolor().equals(colortoremove));  import  javax.swing.jpanel;import  javax.swing.jlabel;import  java.awt.color;import  java.awt.dimension;import  java.awt.font;import  java.awt.graphics;import  java.awt.*;import  java.awt.event.*;public  class  gamepanel  extends  jpanel  implements  actionlistener{public  static  final  int  col_count  =  8;private  static  final  int  visible_row_count  =  16;public  static  final  int  row_count  =  visible_row_count;public  static  final  int  tile_size  =  30;private  boolean  _pausestate;private  jlabel  _pausetext;private  int  _randomnum;private  javax.swing.timer  _timer;  //=  new  javax.swing.timer(500'  '  this);  //board  timer//2d  array  of  colorshapes  to  record  color  shape  placementsprivate  colorshape[][]  _tiles;  private  proxypiece  _proxypiece;private  piece  _newpiece;//key  interactors  for  the  up'  'left'  'and  down  arrow  keysprivate  leftlistener  _leftlistener;private  rightlistener  _rightlistener;private  downlistener  _downlistener;private  pauselistener  _pauselistener;public  gamepanel(){this.setbackground(color.black);_pausestate  =  false;_timer  =  new  javax.swing.timer(500'  '  this);_pausetext  =  new  jlabel(""paused"");_pausetext.setlocation(30'  '100);add(_pausetext);_leftlistener  =  new  leftlistener(this);_rightlistener  =  new  rightlistener(this);_downlistener  =  new  downlistener(this);_pauselistener  =  new  pauselistener(this);_tiles  =  new  colorshape[8][17];_proxypiece  =  new  proxypiece();_proxypiece.setpiece(this.newpiece());for  (int  i  =  0;  i<16;  i++){for(int  j=0;  j<8;j++){_tiles[j][i]  =  null;}}//create  a  hidden  bottom  row  of  black  rectangles  to  act  as  a  boundary  for  the  pieces  in  the  arrayfor  (int  j=0;  j<8;j++){_tiles[j][16]  =  new  colorrectangle(color.black);  }_timer.start();}public  void  dropdown(){if(_tiles[_proxypiece.getxlocation()/30][_proxypiece.getylocation()/30  +  1]  ==  null){_proxypiece.movedown();  }  else  if  ((_tiles[_proxypiece.getxlocation()/30][_proxypiece.getylocation()/30  +  1]  !=  null)  &&  (_tiles[3][0]  ==  null)){//record  the  piece  into  arrayint  _currentcol  =  _proxypiece.getxlocation()/30;int  _currentrow  =  _proxypiece.getylocation()/30;_tiles[_currentcol][_currentrow  -  1]  =  _proxypiece.getfirstpiece();_tiles[_currentcol][_currentrow]  =  _proxypiece.getsecondpiece();repaint();  purge();  //checks  for  a  gameover  if(_tiles[3][0]  !=  null){  _timer.stop();  system.out.println(""game  over"");}_proxypiece.setpiece(this.newpiece());repaint();  }  }//  i  =  row  '  '  j  =  col  public  void  purge(){for  (int  i  =  0;  i<16;  i++){  for(int  j=0;  j<8;j++){if(_tiles[j][i]  !=  null){  if(_tiles[j][i].getshapetype()  ==  2){  //checks  if  object  is  a  circle  //insert  a  recursive  function  that  looks  up'  'down'  'left'  'right  for  similar  colors  and  sets  spot  to  null  removelikecolorsfrom(_tiles'  'j'  'i);}  else  continue;}else  continue;}}repaint();}  //flood  fill  algorithm  //  x=col  '  '  y=row  public  void  removelikecolorsfrom(colorshape[][]  _tiles'  '  int  x'  '  int  y){color  colortoremove  =  _tiles[x][y].getcolor();stack<point>  stack  =  new  stack<point>();stack.add(new  point(x'  'y));while(!stack.empty()){point  next  =  stack.pop();//check  if  this  shape  is  the  proper  colorif(_tiles[next.x][next.y].getcolor().equals(colortoremove)){_tiles[next.x][next.y]  =  null;x  =  next.x;y  =  next.y;//now  push  all  neighbors  onto  stack  for  processingif(x-1>-1  &&  _tiles[x-1][y]  !=  null)  stack.push(new  point(x-1'  'y));if(x+1<_tiles.length)  stack.push(new  point(x+1'  'y));if(y+1<_tiles[0].length)  stack.push(new  point(x'  'y+1));if(y-1>-1)  stack.push(new  point(x'  'y-1));}};  public  void  actionperformed(java.awt.event.actionevent  e){  if(_proxypiece.getpiece()  ==  null){  _proxypiece.setpiece(this.newpiece());}  else  {  dropdown();  repaint();}}//factory  method  that  produces  a  random  shapepublic  piece  newpiece(){_randomnum  =  randomnumber(1'  '3);switch  (_randomnum){case  1:  return  new  piece(new  colorellipse(randomcolor())'  '  new  colorellipse(randomcolor()));  //a  new  2  ellipse  piece  w/  random  colorscase  2:  return  new  piece(new  colorrectangle(randomcolor())'  '  new  colorrectangle(randomcolor()));  case  3:  return  new  piece(new  colorellipse(randomcolor())'  '  new  colorrectangle(randomcolor()));default:  system.out.println(""randomnumber  failed"");}//default  return  value  to  test  if  switch  case  failedreturn  new  piece(new  colorrectangle(color.red)'  '  new  colorrectangle(color.red));}  public  color  randomcolor(){_randomnum  =  randomnumber(1'  '4);switch(_randomnum){case  1:return  color.green;case  2:return  color.blue;case  3:return  color.red;case  4:return  color.yellow;}//default  return  value  to  test  if  switch  case  failedreturn  color.red;}public  static  int  randomnumber(int  low'  '  int  high){return  low  +  (int)(math.random()*(high-low+1));}public  void  paintcomponent(graphics  g)  {if  (_pausestate  ==  false){_pausetext.setvisible(false);super.paintcomponent(g);//  simplify  the  positioning  of  things.g.translate(0'  '  0);//draws  the  board  outline  and  fills  it  whiteg.setcolor(color.white);g.drawrect(0'  '  0'  '  240'  '  480);g.fillrect(0'  '  0'  '  240'  '  480);//draws  a  dark  gray  grid  g.setcolor(color.dark_gray);for(int  x  =  0;  x  <  col_count  +  1;  x++)  {  for(int  y  =  0;  y  <  visible_row_count+1;  y++)  {  g.drawline(0'  '  y  *  tile_size'  '  col_count  *  tile_size'  '  y  *  tile_size);  g.drawline(x  *  tile_size'  '  0'  '  x  *  tile_size'  '  visible_row_count  *  tile_size);  }}graphics2d  abetterpen  =  (graphics2d)g;_proxypiece.fill(abetterpen);for  (int  i  =  0;  i<16;  i++){for(int  j=0;  j<8;j++){if(_tiles[j][i]  !=  null)  _tiles[j][i].fill(abetterpen);}}}  else  if  (_pausestate  ==  true){  _pausetext.setvisible(true);  super.paintcomponent(g);  //  simplify  the  positioning  of  things.  g.translate(0'  '  0);  g.setcolor(color.white);  g.drawrect(0'  '  0'  '  240'  '  480);  g.fillrect(0'  '  0'  '  240'  '  480);}}private  class  leftlistener  extends  keyinteractor{public  leftlistener  (jpanel  apanel){super(apanel'  '  keyevent.vk_left);}public  void  actionperformed(actionevent  e){if(  (_proxypiece.getxlocation()>0)  &&  (_tiles[_proxypiece.getxlocation()/30  -  1][_proxypiece.getylocation()/30]  ==  null)  ){_proxypiece.moveleft();repaint();}}  }private  class  rightlistener  extends  keyinteractor{public  rightlistener  (jpanel  apanel){super(apanel'  '  keyevent.vk_right);}public  void  actionperformed(actionevent  e){if(  ((_proxypiece.getxlocation()<210))  &&  (_tiles[_proxypiece.getxlocation()/30  +  1][_proxypiece.getylocation()/30]  ==  null)  ){_proxypiece.moveright();repaint();}}  }private  class  downlistener  extends  keyinteractor{public  downlistener  (jpanel  apanel){super(apanel'  '  keyevent.vk_down);}public  void  actionperformed(actionevent  e){//loop  that  will  keep  dropping  the  piece  until  it  hits  another  piece  or  the  bottom  of  the  boardwhile(_tiles[_proxypiece.getxlocation()/30][_proxypiece.getylocation()/30  +  1]  ==  null){dropdown();}}}private  class  pauselistener  extends  keyinteractor{public  pauselistener  (jpanel  apanel){super(apanel'  '  keyevent.vk_p);}public  void  actionperformed(actionevent  e){if  (_pausestate  ==  false){_timer.stop();_pausestate  =  true;repaint();}else  if  (_pausestate  ==  true){_timer.start();_pausestate  =  false;repaint();}}  }  };  import  java.awt.*;public  class  proxypiece{private  piece  _currentpiece;  //  peer  objectpublic  proxypiece(){super();_currentpiece  =  null;}public  piece  getpiece(){return  _currentpiece;}public  colorshape  getfirstpiece(){return  _currentpiece.getfirstshape();  }  public  colorshape  getsecondpiece(){return  _currentpiece.getsecondshape();  }public  void  setpiece(piece  apiece){_currentpiece  =  apiece;}public  void  moveleft(){_currentpiece.moveleft();}public  void  moveright(){_currentpiece.moveright();}public  void  movedown(){_currentpiece.movedown();}public  int  getxlocation(){return  _currentpiece.getxlocation();}public  int  getylocation(){return  _currentpiece.getylocation();}public  void  rotate(){}public  void  fill(graphics2d  abetterpen){_currentpiece.fill(abetterpen);}};  import  java.awt.*;public  class  piece{private  final  int  x_start  =  90;private  final  int  y_start  =  0;private  colorshape  _colorshape;private  colorellipse  _colorellipse1'  '  _colorellipse2;private  colorrectangle  _colorrectangle1'  '  _colorrectangle2;private  int  _type;public  piece(colorellipse  firstellipse'  '  colorellipse  secondellipse){_colorellipse1  =  firstellipse;_colorellipse2  =  secondellipse;_type  =  1;  //a  piece  that  has  2  ellipsesthis.setlocation(x_start'  'y_start);}public  piece(colorrectangle  firstrectangle'  '  colorrectangle  secondrectangle){_colorrectangle1  =  firstrectangle;_colorrectangle2  =  secondrectangle;_type  =  2;  //a  piece  that  has  2  squaresthis.setlocation(x_start'  'y_start);}public  piece(colorellipse  firstellipse'  '  colorrectangle  secondrectangle){_colorellipse1  =  firstellipse;_colorrectangle1  =  secondrectangle;_type  =  3;  //a  piece  that  has  1  ellipse  and  1  squarethis.setlocation(x_start'  'y_start);}public  void  setlocation(int  x'  '  int  y){if  (_type  ==  1){  _colorellipse1.setlocation(x'  'y);  _colorellipse2.setlocation(x'  'y+30);}else  if  (_type  ==  2){  _colorrectangle1.setlocation(x'  'y);  _colorrectangle2.setlocation(x'  'y+30);}else  if  (_type  ==  3){  _colorellipse1.setlocation(x'  'y);  _colorrectangle1.setlocation(x'  'y+30);}}//public  void  rotate(){//newx  =  centerofrotationx  -  centerofrotationy  +  oldylocation;  //newy  =  centerofrotationy  -  centerofrotationx  -  oldxlocation;////this.setlocation(newx'  '  newy);//}public  void  moveleft(){if  (_type  ==  1){  if((int)_colorellipse1.getx()  >  0){  this.setlocation((int)_colorellipse1.getx()-30'  '  (int)_colorellipse1.gety());}  }  else  if  (_type  ==  2){if((int)_colorrectangle1.getx()  >  0){  this.setlocation((int)_colorrectangle1.getx()-30'  '  (int)_colorrectangle1.gety());}  }  else  if  (_type  ==  3){if((int)_colorellipse1.getx()  >  0){  this.setlocation((int)_colorellipse1.getx()-30'  '  (int)_colorellipse1.gety());}  }}public  void  moveright(){  if  (_type  ==  1){  if((int)_colorellipse1.getx()  <  210){  this.setlocation((int)_colorellipse1.getx()+30'  '  (int)_colorellipse1.gety());  }  }  else  if  (_type  ==  2){  if((int)_colorrectangle1.getx()  <  210){this.setlocation((int)_colorrectangle1.getx()+30'  '  (int)_colorrectangle1.gety());  }  }  else  if  (_type  ==  3){  if((int)_colorellipse1.getx()  <  210){  this.setlocation((int)_colorellipse1.getx()+30'  '  (int)_colorellipse1.gety());}  }}public  void  movedown(){if  (_type  ==  1){this.setlocation((int)_colorellipse1.getx()'  '  (int)_colorellipse1.gety()+30);  }  else  if  (_type  ==  2){this.setlocation((int)_colorrectangle1.getx()'  '  (int)_colorrectangle1.gety()+30);  }  else  if  (_type  ==  3){this.setlocation((int)_colorellipse1.getx()'  '  (int)_colorellipse1.gety()+30);  }}public  int  getxlocation(){  if  (_type  ==  1){return  (int)_colorellipse1.getx();  }  else  if  (_type  ==  2){return  (int)_colorrectangle1.getx();  }  else  if  (_type  ==  3){return  (int)_colorellipse1.getx();  }  return  1;}public  int  getylocation(){  if  (_type  ==  1){return  (int)_colorellipse1.gety()+30;  }  else  if  (_type  ==  2){return  (int)_colorrectangle1.gety()+30;  }  else  if  (_type  ==  3){return  (int)_colorellipse1.gety()+30;  }  return  1;}public  void  fill(graphics2d  abetterpen){if  (_type  ==  1){  _colorellipse1.fill(abetterpen);  _colorellipse2.fill(abetterpen);}else  if  (_type  ==  2){  _colorrectangle1.fill(abetterpen);  _colorrectangle2.fill(abetterpen);}else  if  (_type  ==  3){  _colorellipse1.fill(abetterpen);  _colorrectangle1.fill(abetterpen);}}public  colorshape  getfirstshape(){if  (_type  ==  1){return  _colorellipse1;  }else  if  (_type  ==  2){return  _colorrectangle1;  }else  if  (_type  ==  3){return  _colorellipse1;  }  return  null;}public  colorshape  getsecondshape(){if  (_type  ==  1){  return  _colorellipse2;}else  if  (_type  ==  2){  return  _colorrectangle2;  }else  if  (_type  ==  3){  return  _colorrectangle1;  }return  null;}}"  ,i  am  make  a  game  similar  to  tetri  that  use  squar  and  ellips  i  want  to  make  a  method  that  will  remov  similar  color  block  when  a  circl  of  the  same  color  is  place  next  to  them  i  want  it  to  remov  all  the  similar  color  block  that  are  connect  to  these  block  as  well  the  proxi  piec  are  ad  to  a  d  array  of  color  shape  when  they  proxi  piec  hit  the  bottom  of  the  board  or  anoth  shape  in  the  d  array  edit  i  updat  me  code  that  ad  william  floodfil  algorithm  howev  i  get  a  null  pointer  from  his  line  here  is  my  main  jpanel  where  the  d  array  is  here  is  my  proxypiec  class  here  is  my  piec  class  my  colorellips  is  an  ellips  d  doubl  and  colorrectangl  is  a  rectangl  d  doubl  they  are  both  subclass  of  colorshap  and  inherit  it  method  ,  simpleassignmentexpress  privatefieldspecifi  instancefield  simplevari  objectmethodinvoc  actualmethodparamet  fals  objectcreationstat  constructorcal  stringliter  stringdatatyp  objectvari  multidimensionalarraydatatyp  intdatatyp  arrayinitializationstat  arrayiniti  arrayvari  arrayel  lessexpress  greaterexpress  ifstat  addexpress  arraylength  instancefieldinvoc  subtractexpress  formalmethodparamet  ifelsestat  equalexpress  null  switchstat  caseclaus  returnstat  multiplyexpress  instancefieldinitializationstat  explicittypecast  forstat  postincrementexpress  notequalexpress  privateclassspecifi  extendsspecif  importstat  ondemandimport  ifelseifstat 