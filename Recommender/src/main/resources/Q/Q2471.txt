 question  ,  public  class  threadedquick  extends  thread{final  int  max_threads  =  runtime.getruntime().availableprocessors();countdownlatch  donesignal;static  int  num_threads  =  1;int[]  my_array;int  start'  '  end;public  threadedquick(countdownlatch  donesignal'  '  int[]  array'  '  int  start'  '  int  end)  {this.my_array  =  array;this.start  =  start;this.end  =  end;this.donesignal  =  donesignal;}public  static  void  reset()  {num_threads  =  1;}public  void  run()  {quicksort(my_array'  '  start'  '  end);donesignal.countdown();num_threads--;}public  void  quicksort(int[]  array'  '  int  start'  '  int  end)  {int  len  =  end-start+1;if  (len  <=  1)return;int  pivot_index  =  medianofthree(array'  '  start'  '  end);int  pivotvalue  =  array[pivot_index];swap(array'  '  pivot_index'  '  end);int  storeindex  =  start;for  (int  i  =  start;  i  <  end;  i++)  {  if  (array[i]  <=  pivotvalue)  {  swap(array'  '  i'  '  storeindex);  storeindex++;  }}swap(array'  '  storeindex'  '  end);if  (num_threads  <  max_threads)  {num_threads++;countdownlatch  completionsignal  =  new  countdownlatch(1);new  threadedquick(completionsignal'  '  array'  '  start'  '  storeindex  -  1).start();quicksort(array'  '  storeindex  +  1'  '  end);try  {completionsignal.await(1000'  '  timeunit.seconds);}  catch(exception  ex)  {ex.printstacktrace();}}  else  {quicksort(array'  '  start'  '  storeindex  -  1);quicksort(array'  '  storeindex  +  1'  '  end);}}};  threadedquick.reset();countdownlatch  completionsignal  =  new  countdownlatch(1);new  threadedquick(completionsignal'  '  array'  '  0'  '  array.length-1).start();try  {completionsignal.await(1000'  '  timeunit.seconds);}  catch(exception  ex){ex.printstacktrace();}  ,i  am  experi  with  parallel  algorithm  in  java  i  began  with  merg  sort  and  post  my  attempt  in  this  my  revis  attempt  is  in  the  code  below  where  i  now  tri  to  parallel  quick  sortar  there  ani  rooki  mistak  in  my  multithread  implement  or  approach  to  this  problem  if  not  shouldnt  i  expect  more  than  a  speed  increas  between  a  sequenti  and  a  parallel  algorithm  on  a  duelcor  see  time  at  bottom  here  is  the  multithread  algorithm  here  is  how  i  start  it  off  i  test  this  against  arrayssort  and  a  similar  sequenti  quick  sort  algorithm  here  are  the  time  result  on  an  intel  duelcor  dell  laptop  in  second  elementssequentialthreadedarrayssort  elementssequentialthreadedarrayssort  elementssequentialthreadedarrayssort  elementssequentialthreadedarrayssort  elementssequentialthreadedarrayssort  each  number  abov  is  the  averag  time  of  test  throw  out  the  lowest  and  highest  case  i  use  randomnextintintegermaxvalu  to  generat  an  array  for  each  test  which  was  initi  onc  everi  test  with  the  same  seed  each  test  consist  of  time  the  given  algorithm  with  systemnanotim  i  round  to  six  decim  place  after  averag  and  obvious  i  did  check  to  see  if  each  sort  as  you  can  see  there  is  about  a  increas  in  speed  between  the  sequenti  and  thread  case  in  everi  set  of  test  as  i  ask  abov  shouldnt  i  expect  more  than  that  ,  objectvari  simplevari  arraydatatyp  intdatatyp  instancefieldinvoc  thisrefer  simpleassignmentexpress  staticmethodspecifi  actualmethodparamet  objectmethodinvoc  postdecrementexpress  formalmethodparamet  subtractexpress  addexpress  ifstat  lessequalexpress  arrayel  postincrementexpress  lessexpress  objectcreationstat  constructorcal  trycatchstat  instancefield  instancefieldinitializationstat    simpleassignmentexpress  javalangstringlength  constant  constantinitializationstat  intdatatyp  javalangmathmin  actualmethodparamet  addexpress  multiplyexpress  formalmethodparamet  privatemethodspecifi  staticmethodspecifi  booleandatatyp  simplevari  arraycreationstat  arrayvari  arraydatatyp  subtractexpress  forstat  lessexpress  andexpress  postincrementexpress  arrayel  ifelsestat  whilestat  objectmethodinvoc  returnstat  fals     