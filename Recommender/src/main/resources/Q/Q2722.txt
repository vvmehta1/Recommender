 question  ,  "public  void  sendheartbeat(){  logger.info(""sending  a  hearbeat!"");  printwriter  printwriter=null;  try  {  printwriter  =  new  printwriter(clientsocket.getoutputstream());  }  catch  (ioexception  e)  {  logger.info(e.tostring());  }  if(printwriter!=null){  printwriter.print(""heartbeat#"");  printwriter.flush();  }};  printwriter=new  printwriter(theserver.getclientsocket().getoutputstream());"  ,so  i  have  two  threadsthread  one  manag  the  client  connect  there  is  onli  one  client  and  one  server  i  call  it  my  server  thread  thread  two  manag  send  messag  to  the  clienti  call  it  my  messag  processor  thread  thread  one  is  respons  among  other  thing  send  a  heartbeat  to  the  client  period  when  program  i  made  an  assumpt  that  the  socket  werent  thread  safe  but  the  buffer  were  and  as  long  as  i  was  use  seper  buffer  for  the  server  and  processor  thread  i  would  be  finei  also  made  the  assumpt  that  the  printwrit  was  analog  to  the  socket  buffer  in  java  under  these  assumpt  i  wrote  this  function  to  send  a  heartbeat  the  other  thread  the  processor  one  doe  someth  similar  in  that  it  doe  in  this  manner  i  would  creat  a  new  buffer  everi  time  i  wish  to  send  a  heartbeat  and  my  messag  would  never  get  overwritten  unfortun  this  doe  not  seem  to  be  the  caseand  i  get  an  messag  come  through  the  pipe  like  thisdsgdsbheartbeatsdg  this  caus  a  core  dump  later  here  are  my  question  socket  are  obvious  not  thread  safe  but  are  the  printwrit  i  get  from  them  thread  safeor  is  it  just  return  the  same  printwrit  what  is  analog  to  the  socket  buffer  in  javahow  should  i  think  about  this  problem  how  do  i  make  it  so  that  these  thread  do  not  write  to  the  same  buffer  on  the  socket  ,    simpleassignmentexpress  equalexpress  constantinvoc  objectvari  simplevari  