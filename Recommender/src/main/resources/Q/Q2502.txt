 question  ,  "public  class  remotecommand  {private  string  user;private  string  host;private  string  password;private  string  command;private  list<string>  commandresults;private  taskexecutor  taskexecutor;public  remotecommand(string  user'  '  string  host'  '  string  password'  '  taskexecutor  taskexecutor)  {setuser(user);sethost(host);setpassword(password);settaskexecutor(taskexecutor);}/**  *  @param  user  the  user  to  set  */public  void  setuser(string  user)  {this.user  =  user;}/**  *  @return  the  user  */public  string  getuser()  {return  user;}/**  *  @param  host  the  host  to  set  */public  void  sethost(string  host)  {this.host  =  host;}/**  *  @return  the  host  */public  string  gethost()  {return  host;}/**  *  @param  password  the  password  to  set  */public  void  setpassword(string  password)  {this.password  =  password;}/**  *  @return  the  password  */public  string  getpassword()  {return  password;}/**  *  @param  command  the  command  to  set  */private  void  setcommand(string  command)  {this.command  =  command;}/**  *  @return  the  command  */private  string  getcommand()  {return  command;}/**  *  @param  commandresults  the  commandresults  to  set  */private  void  setcommandresults(list<string>  commandresults)  {this.commandresults  =  commandresults;}/**  *  @return  the  commandresults  */public  list<string>  getcommandresults(string  command)  {taskexecutor.execute(new  commandtask(command)  );return  commandresults;}/**  *  @param  taskexecutor  the  taskexecutor  to  set  */public  void  settaskexecutor(taskexecutor  taskexecutor)  {this.taskexecutor  =  taskexecutor;}/**  *  @return  the  taskexecutor  */public  taskexecutor  gettaskexecutor()  {return  taskexecutor;}private  class  commandtask  implements  runnable  {public  commandtask(string  command)  {setcommand(command);system.out.println(""test:  ""  +  getcommand());}/**  *  *  @param  command  */public  void  run()  {list<string>  results  =  new  linkedlist<string>();string  command  =  getcommand();try  {system.out.println(""running"");jsch  jsch  =  new  jsch();string  user  =  getuser();string  host  =  gethost();java.util.properties  config  =  new  java.util.properties();  config.put(""stricthostkeychecking""'  '  ""no"");host  =  host.substring(host.indexof('@')  +  1);session  session  =  jsch.getsession(user'  '  host'  '  22);session.setpassword(getpassword());session.setconfig(config);session.connect();channel  channel  =  session.openchannel(""exec"");((channelexec)  channel).setcommand(command);channel.setinputstream(null);((channelexec)  channel).seterrstream(system.err);inputstream  in  =  channel.getinputstream();channel.connect();byte[]  tmp  =  new  byte[1024];while  (true)  {while  (in.available()  >  0)  {int  i  =  in.read(tmp'  '  0'  '  1024);if  (i  <  0)break;results.add(new  string(tmp'  '  0'  '  i));system.out.print(new  string(tmp'  '  0'  '  i));}if  (channel.isclosed())  {//system.out.println(""exit-status:  ""//+  channel.getexitstatus());break;}try  {thread.sleep(1000);}  catch  (exception  ee)  {ee.printstacktrace();}}channel.disconnect();session.disconnect();}  catch  (exception  e)  {system.out.println(e);}setcommandresults(results);system.out.println(""finished  running"");}}};  @testpublic  void  testremoteexecution()  {remotecommand  =  (remotecommand)  applicationcontext.getbean(""remotecommand"");remotecommand.getcommandresults(""scripts/something.pl  xxx.xxx.xxx.xxx"");//list<string>  results  =  remotecommand.getcommandresults(""scripts/something.pl  xxx.xxx.xxx.xxx"");//for  (string  line  :  results)  {//system.out.println(line.trim());//}};  <bean  id=""taskexecutor""  class=""org.springframework.scheduling.concurrent.threadpooltaskexecutor"">  <property  name=""corepoolsize""  value=""5""  />  <property  name=""maxpoolsize""  value=""10""  />  <property  name=""queuecapacity""  value=""25""  /></bean><!--  ********************  --><!--utilities  --><!--  ********************  -->  <bean  name=""remotecommand""  class=""com.xxx.ncc.sonet.utilities.remotecommand""  scope=""prototype""><description>remote  command</description><constructor-arg><value>${remote.user}</value></constructor-arg><constructor-arg><value>${remote.host}</value></constructor-arg><constructor-arg><value>${remote.password}</value></constructor-arg><constructor-arg  ref=""taskexecutor""  /></bean>  "  ,alright  possibl  a  naiv  question  here  i  have  a  servic  that  need  to  log  into  multipl  network  devic  run  a  command  on  each  and  collect  the  resultsfor  speed  rather  than  collect  the  inform  on  each  devic  in  sequenc  i  need  to  access  them  all  concurr  and  consum  the  result  after  they  are  doneus  the  spring  framework  and  jsch  im  quit  easili  abl  to  queri  each  devic  correctlywher  i  am  run  into  some  confus  is  in  tri  to  rewir  the  bean  to  use  taskexecutor  to  accomplish  this  what  i  cant  figur  out  how  to  do  is  how  to  know  when  the  thread  is  finish  what  i  have  so  far  is  this  within  my  junit  test  i  have  my  applicationcontextxml  file  i  get  as  far  as  the  first  println  in  the  run  method  then  the  test  exit  clean  with  no  error  i  never  get  to  the  second  println  at  the  bottom  of  that  routin  ive  look  at  this  thread  which  was  veri  use  but  not  implement  in  a  spring  specif  fashionim  sure  im  miss  someth  simpl  or  have  complet  run  off  the  rail  hereani  help  is  appreci  ,  stringvari  stringdatatyp  simplevari  privateclassspecifi  implementsspecif  methodimplement  formalmethodparamet  constructordefinit  publicconstructorspecifi  actualmethodparamet  javalangsystemoutprintln  stringliter  stringaddit  simpleassignmentexpress  javalangstringsubstr  objectmethodinvoc  addexpress  ifstat  lessexpress  stringcreationstat  stringconstructorcal  javalangsystemoutprint 